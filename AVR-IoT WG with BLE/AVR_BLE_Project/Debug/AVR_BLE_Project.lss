
AVR_BLE_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00802800  000016de  00001792  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001662  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  00005662  00001662  00001716  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000070  0080283a  0080283a  000017cc  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001828  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000600  00000000  00000000  00001868  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000094a0  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003a55  00000000  00000000  0000b308  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002b38  00000000  00000000  0000ed5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000c90  00000000  00000000  00011898  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003601  00000000  00000000  00012528  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001e22  00000000  00000000  00015b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004b0  00000000  00000000  0001794b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_7>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__vector_15>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__vector_26>
      6c:	0c 94 d2 06 	jmp	0xda4	; 0xda4 <__vector_27>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 67 07 	jmp	0xece	; 0xece <__vector_31>
      80:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__vector_32>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e3       	ldi	r29, 0x3F	; 63
      9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
      9c:	18 e2       	ldi	r17, 0x28	; 40
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b8 e2       	ldi	r27, 0x28	; 40
      a2:	ee ed       	ldi	r30, 0xDE	; 222
      a4:	f6 e1       	ldi	r31, 0x16	; 22
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 33       	cpi	r26, 0x3A	; 58
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	28 e2       	ldi	r18, 0x28	; 40
      b4:	aa e3       	ldi	r26, 0x3A	; 58
      b6:	b8 e2       	ldi	r27, 0x28	; 40
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 3a       	cpi	r26, 0xAA	; 170
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <main>
      c6:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
      ce:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <system_init>
      d2:	08 95       	ret

000000d4 <updateStateMachine>:
volatile uint8_t tempSensorValue[MAX_SENSORS_BUFFER_SIZE];

extern uint8_t dataFromTerminal;

void updateStateMachine(void)
{    
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	00 d0       	rcall	.+0      	; 0xde <updateStateMachine+0xa>
      de:	00 d0       	rcall	.+0      	; 0xe0 <updateStateMachine+0xc>
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
    switch (applicationState)
      e4:	80 91 3a 28 	lds	r24, 0x283A	; 0x80283a <__data_end>
      e8:	81 30       	cpi	r24, 0x01	; 1
      ea:	a1 f1       	breq	.+104    	; 0x154 <updateStateMachine+0x80>
      ec:	20 f0       	brcs	.+8      	; 0xf6 <updateStateMachine+0x22>
      ee:	82 30       	cpi	r24, 0x02	; 2
      f0:	09 f4       	brne	.+2      	; 0xf4 <updateStateMachine+0x20>
      f2:	7e c0       	rjmp	.+252    	; 0x1f0 <updateStateMachine+0x11c>
      f4:	97 c0       	rjmp	.+302    	; 0x224 <updateStateMachine+0x150>
    applicationEvent = NO_EVENT;  
}

static void commandStateHandler(void)
{
    switch (applicationEvent)
      f6:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <applicationEvent>
      fa:	81 30       	cpi	r24, 0x01	; 1
      fc:	81 f0       	breq	.+32     	; 0x11e <updateStateMachine+0x4a>
      fe:	28 f0       	brcs	.+10     	; 0x10a <updateStateMachine+0x36>
     100:	83 30       	cpi	r24, 0x03	; 3
     102:	b9 f0       	breq	.+46     	; 0x132 <updateStateMachine+0x5e>
     104:	84 30       	cpi	r24, 0x04	; 4
     106:	31 f0       	breq	.+12     	; 0x114 <updateStateMachine+0x40>
     108:	8d c0       	rjmp	.+282    	; 0x224 <updateStateMachine+0x150>
    {
        case DATA_FROM_TERMINAL_EVENT:
            rn4871_SendByte(dataFromTerminal);
     10a:	80 91 3c 28 	lds	r24, 0x283C	; 0x80283c <dataFromTerminal>
     10e:	0e 94 12 03 	call	0x624	; 0x624 <rn4871_SendByte>
     112:	88 c0       	rjmp	.+272    	; 0x224 <updateStateMachine+0x150>
            break;
        
        case END_COMMAND_EVENT:
            rn4871_SendByte(dataFromTerminal);
     114:	80 91 3c 28 	lds	r24, 0x283C	; 0x80283c <dataFromTerminal>
     118:	0e 94 12 03 	call	0x624	; 0x624 <rn4871_SendByte>
     11c:	83 c0       	rjmp	.+262    	; 0x224 <updateStateMachine+0x150>
            break;
        
        case CHARACTERISTICS_EVENT:
            applicationState = CHARACTERISTICS_STATE;
     11e:	82 e0       	ldi	r24, 0x02	; 2
     120:	80 93 3a 28 	sts	0x283A, r24	; 0x80283a <__data_end>
            dataTransfer_replyToTerminal(characteristicsModeReply, strlen(characteristicsModeReply));
     124:	62 e2       	ldi	r22, 0x22	; 34
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	87 e7       	ldi	r24, 0x77	; 119
     12a:	96 e5       	ldi	r25, 0x56	; 86
     12c:	0e 94 4a 01 	call	0x294	; 0x294 <dataTransfer_replyToTerminal>
     130:	79 c0       	rjmp	.+242    	; 0x224 <updateStateMachine+0x150>
            break;
        
        case TOGGLE_EVENT:
            applicationState = APPLICATION_STATE;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	80 93 3a 28 	sts	0x283A, r24	; 0x80283a <__data_end>
            dataTransfer_replyToTerminal(applicationModeReply, strlen(applicationModeReply));
     138:	6e e1       	ldi	r22, 0x1E	; 30
     13a:	70 e0       	ldi	r23, 0x00	; 0
     13c:	8a e9       	ldi	r24, 0x9A	; 154
     13e:	96 e5       	ldi	r25, 0x56	; 86
     140:	0e 94 4a 01 	call	0x294	; 0x294 <dataTransfer_replyToTerminal>
}

static void Timer_start(void)
{
    // set the starting count value to 0 and enable the module
    TCA0.SINGLE.CNT = 0x0;
     144:	e0 e0       	ldi	r30, 0x00	; 0
     146:	fa e0       	ldi	r31, 0x0A	; 10
     148:	10 a2       	std	Z+32, r1	; 0x20
     14a:	11 a2       	std	Z+33, r1	; 0x21
    TCA0.SINGLE.CTRLA |= 1 << TCA_SINGLE_ENABLE_bp;
     14c:	80 81       	ld	r24, Z
     14e:	81 60       	ori	r24, 0x01	; 1
     150:	80 83       	st	Z, r24
     152:	68 c0       	rjmp	.+208    	; 0x224 <updateStateMachine+0x150>
            break;
    }    
}
static void applicationStateHandler(void)
{
    switch (applicationEvent)
     154:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <applicationEvent>
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	19 f0       	breq	.+6      	; 0x162 <updateStateMachine+0x8e>
     15c:	83 30       	cpi	r24, 0x03	; 3
     15e:	d1 f1       	breq	.+116    	; 0x1d4 <updateStateMachine+0x100>
     160:	61 c0       	rjmp	.+194    	; 0x224 <updateStateMachine+0x150>
    }
}

void getSensorsValues(void)
{
    volatile uint16_t lightValue = 0;
     162:	1b 82       	std	Y+3, r1	; 0x03
     164:	1c 82       	std	Y+4, r1	; 0x04
    volatile int16_t tempValue = 0;
     166:	19 82       	std	Y+1, r1	; 0x01
     168:	1a 82       	std	Y+2, r1	; 0x02
    
    lightValue = SENSORS_getLightValue();
     16a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <SENSORS_getLightValue>
     16e:	8b 83       	std	Y+3, r24	; 0x03
     170:	9c 83       	std	Y+4, r25	; 0x04
    sprintf(lightSensorValue, "%.4x", lightValue);  
     172:	8b 81       	ldd	r24, Y+3	; 0x03
     174:	9c 81       	ldd	r25, Y+4	; 0x04
     176:	9f 93       	push	r25
     178:	8f 93       	push	r24
     17a:	02 e6       	ldi	r16, 0x62	; 98
     17c:	16 e5       	ldi	r17, 0x56	; 86
     17e:	1f 93       	push	r17
     180:	0f 93       	push	r16
     182:	8f e9       	ldi	r24, 0x9F	; 159
     184:	98 e2       	ldi	r25, 0x28	; 40
     186:	9f 93       	push	r25
     188:	8f 93       	push	r24
     18a:	0e 94 4b 08 	call	0x1096	; 0x1096 <sprintf>
    
    tempValue = SENSORS_getTempValue() / 100;
     18e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SENSORS_getTempValue>
     192:	64 e6       	ldi	r22, 0x64	; 100
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	0e 94 09 08 	call	0x1012	; 0x1012 <__divmodhi4>
     19a:	69 83       	std	Y+1, r22	; 0x01
     19c:	7a 83       	std	Y+2, r23	; 0x02
    sprintf(tempSensorValue, "%.4x", tempValue);      
     19e:	89 81       	ldd	r24, Y+1	; 0x01
     1a0:	9a 81       	ldd	r25, Y+2	; 0x02
     1a2:	9f 93       	push	r25
     1a4:	8f 93       	push	r24
     1a6:	1f 93       	push	r17
     1a8:	0f 93       	push	r16
     1aa:	8a e9       	ldi	r24, 0x9A	; 154
     1ac:	98 e2       	ldi	r25, 0x28	; 40
     1ae:	9f 93       	push	r25
     1b0:	8f 93       	push	r24
     1b2:	0e 94 4b 08 	call	0x1096	; 0x1096 <sprintf>
}

void updateCharacteristicsValue(void)
{
    dataTransfer_updateCharacteristicsValues(LIGHT_COMMAND_HANDLER, lightSensorValue);
     1b6:	6f e9       	ldi	r22, 0x9F	; 159
     1b8:	78 e2       	ldi	r23, 0x28	; 40
     1ba:	8c e4       	ldi	r24, 0x4C	; 76
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 98 01 	call	0x330	; 0x330 <dataTransfer_updateCharacteristicsValues>
    dataTransfer_updateCharacteristicsValues(TEMP_COMMAND_HANDLER, tempSensorValue);   
     1c2:	6a e9       	ldi	r22, 0x9A	; 154
     1c4:	78 e2       	ldi	r23, 0x28	; 40
     1c6:	84 e5       	ldi	r24, 0x54	; 84
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 98 01 	call	0x330	; 0x330 <dataTransfer_updateCharacteristicsValues>
     1ce:	cd bf       	out	0x3d, r28	; 61
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	28 c0       	rjmp	.+80     	; 0x224 <updateStateMachine+0x150>
            getSensorsValues();
            updateCharacteristicsValue();
            break;
        
        case TOGGLE_EVENT:
            applicationState = COMMAND_STATE;
     1d4:	10 92 3a 28 	sts	0x283A, r1	; 0x80283a <__data_end>
    TCA0.SINGLE.CTRLA |= 1 << TCA_SINGLE_ENABLE_bp;
}

static void Timer_stop(void)
{
    TCA0.SINGLE.CTRLA &= ~(1 << TCA_SINGLE_ENABLE_bp);
     1d8:	e0 e0       	ldi	r30, 0x00	; 0
     1da:	fa e0       	ldi	r31, 0x0A	; 10
     1dc:	80 81       	ld	r24, Z
     1de:	8e 7f       	andi	r24, 0xFE	; 254
     1e0:	80 83       	st	Z, r24
            break;
        
        case TOGGLE_EVENT:
            applicationState = COMMAND_STATE;
            Timer_stop();
            dataTransfer_replyToTerminal(commandModeReply, strlen(commandModeReply));
     1e2:	6a e1       	ldi	r22, 0x1A	; 26
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	89 eb       	ldi	r24, 0xB9	; 185
     1e8:	96 e5       	ldi	r25, 0x56	; 86
     1ea:	0e 94 4a 01 	call	0x294	; 0x294 <dataTransfer_replyToTerminal>
     1ee:	1a c0       	rjmp	.+52     	; 0x224 <updateStateMachine+0x150>
            break;
    }
}
static void characteristicsStateHandler(void)
{
    switch (applicationEvent)
     1f0:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <applicationEvent>
     1f4:	88 23       	and	r24, r24
     1f6:	19 f0       	breq	.+6      	; 0x1fe <updateStateMachine+0x12a>
     1f8:	84 30       	cpi	r24, 0x04	; 4
     1fa:	31 f0       	breq	.+12     	; 0x208 <updateStateMachine+0x134>
     1fc:	13 c0       	rjmp	.+38     	; 0x224 <updateStateMachine+0x150>
    {
        case DATA_FROM_TERMINAL_EVENT:
            dataTransfer_updateCharacteristicsHandler(dataFromTerminal);
     1fe:	80 91 3c 28 	lds	r24, 0x283C	; 0x80283c <dataFromTerminal>
     202:	0e 94 63 01 	call	0x2c6	; 0x2c6 <dataTransfer_updateCharacteristicsHandler>
     206:	0e c0       	rjmp	.+28     	; 0x224 <updateStateMachine+0x150>
            break;
        
        case END_COMMAND_EVENT:
            applicationState = COMMAND_STATE;
     208:	10 92 3a 28 	sts	0x283A, r1	; 0x80283a <__data_end>
            dataTransfer_replyToTerminal(handlerWrittenReply, strlen(handlerWrittenReply));
     20c:	6f e0       	ldi	r22, 0x0F	; 15
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	87 e6       	ldi	r24, 0x67	; 103
     212:	96 e5       	ldi	r25, 0x56	; 86
     214:	0e 94 4a 01 	call	0x294	; 0x294 <dataTransfer_replyToTerminal>
            dataTransfer_replyToTerminal(commandModeReply, strlen(commandModeReply));
     218:	6a e1       	ldi	r22, 0x1A	; 26
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	89 eb       	ldi	r24, 0xB9	; 185
     21e:	96 e5       	ldi	r25, 0x56	; 86
     220:	0e 94 4a 01 	call	0x294	; 0x294 <dataTransfer_replyToTerminal>
            
        default:
            break;
    }
    
    applicationEvent = NO_EVENT;  
     224:	85 e0       	ldi	r24, 0x05	; 5
     226:	80 93 99 28 	sts	0x2899, r24	; 0x802899 <applicationEvent>
}
     22a:	24 96       	adiw	r28, 0x04	; 4
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	de bf       	out	0x3e, r29	; 62
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	1f 91       	pop	r17
     236:	0f 91       	pop	r16
     238:	08 95       	ret

0000023a <dataTransfer_parseDataFromTerminal>:
 
extern uint8_t applicationState; 
    
void dataTransfer_parseDataFromTerminal(void)
{
    switch (dataFromTerminal)
     23a:	80 91 3c 28 	lds	r24, 0x283C	; 0x80283c <dataFromTerminal>
     23e:	83 32       	cpi	r24, 0x23	; 35
     240:	29 f0       	breq	.+10     	; 0x24c <dataTransfer_parseDataFromTerminal+0x12>
     242:	8f 32       	cpi	r24, 0x2F	; 47
     244:	39 f0       	breq	.+14     	; 0x254 <dataTransfer_parseDataFromTerminal+0x1a>
     246:	8a 30       	cpi	r24, 0x0A	; 10
     248:	69 f4       	brne	.+26     	; 0x264 <dataTransfer_parseDataFromTerminal+0x2a>
     24a:	08 c0       	rjmp	.+16     	; 0x25c <dataTransfer_parseDataFromTerminal+0x22>
    {
        case CHANGE_CHARACTERISTICS_HANDLER_COMMAND:
            applicationEvent = CHARACTERISTICS_EVENT;
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	80 93 99 28 	sts	0x2899, r24	; 0x802899 <applicationEvent>
            break;
     252:	08 95       	ret
        
        case TOGGLE_APPLICATION_STATE_COMMAND:
            applicationEvent = TOGGLE_EVENT;
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	80 93 99 28 	sts	0x2899, r24	; 0x802899 <applicationEvent>
            break;
     25a:	08 95       	ret
        
        case END_COMMAND:
            applicationEvent = END_COMMAND_EVENT;
     25c:	84 e0       	ldi	r24, 0x04	; 4
     25e:	80 93 99 28 	sts	0x2899, r24	; 0x802899 <applicationEvent>
            break;
     262:	08 95       	ret
        
        default:
            applicationEvent = DATA_FROM_TERMINAL_EVENT;
     264:	10 92 99 28 	sts	0x2899, r1	; 0x802899 <applicationEvent>
     268:	08 95       	ret

0000026a <dataTransfer_RN4871ToTerminal>:

void dataTransfer_RN4871ToTerminal(void)
{
    uint8_t dataFromRN4871;
    
    USART_RN4871_default_rx_isr_cb();
     26a:	0e 94 30 06 	call	0xc60	; 0xc60 <USART_RN4871_default_rx_isr_cb>
    dataFromRN4871 = USART_RN4871_read();
     26e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <USART_RN4871_read>
    
    if (applicationState == COMMAND_STATE)
     272:	90 91 3a 28 	lds	r25, 0x283A	; 0x80283a <__data_end>
     276:	91 11       	cpse	r25, r1
     278:	02 c0       	rjmp	.+4      	; 0x27e <dataTransfer_RN4871ToTerminal+0x14>
    {
        USART_TERMINAL_write(dataFromRN4871);
     27a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <USART_TERMINAL_write>
     27e:	08 95       	ret

00000280 <dataTransfer_terminalToRN4871>:
    }
}

void dataTransfer_terminalToRN4871(void)
{
    USART_TERMINAL_default_rx_isr_cb();
     280:	0e 94 65 06 	call	0xcca	; 0xcca <USART_TERMINAL_default_rx_isr_cb>
    dataFromTerminal = USART_TERMINAL_read();
     284:	0e 94 b9 07 	call	0xf72	; 0xf72 <USART_TERMINAL_read>
     288:	80 93 3c 28 	sts	0x283C, r24	; 0x80283c <dataFromTerminal>
    
    newDataFlag = true;
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	80 93 3b 28 	sts	0x283B, r24	; 0x80283b <newDataFlag>
     292:	08 95       	ret

00000294 <dataTransfer_replyToTerminal>:
}

void dataTransfer_replyToTerminal(const char* reply, uint8_t replyLength)
{
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
    uint8_t i;
    
    for (i = 0; i < replyLength; i++)
     29c:	66 23       	and	r22, r22
     29e:	71 f0       	breq	.+28     	; 0x2bc <dataTransfer_replyToTerminal+0x28>
     2a0:	ec 01       	movw	r28, r24
     2a2:	61 50       	subi	r22, 0x01	; 1
     2a4:	06 2f       	mov	r16, r22
     2a6:	10 e0       	ldi	r17, 0x00	; 0
     2a8:	0f 5f       	subi	r16, 0xFF	; 255
     2aa:	1f 4f       	sbci	r17, 0xFF	; 255
     2ac:	08 0f       	add	r16, r24
     2ae:	19 1f       	adc	r17, r25
    {
        USART_TERMINAL_write(reply[i]);
     2b0:	89 91       	ld	r24, Y+
     2b2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <USART_TERMINAL_write>

void dataTransfer_replyToTerminal(const char* reply, uint8_t replyLength)
{
    uint8_t i;
    
    for (i = 0; i < replyLength; i++)
     2b6:	c0 17       	cp	r28, r16
     2b8:	d1 07       	cpc	r29, r17
     2ba:	d1 f7       	brne	.-12     	; 0x2b0 <dataTransfer_replyToTerminal+0x1c>
    {
        USART_TERMINAL_write(reply[i]);
    }
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	08 95       	ret

000002c6 <dataTransfer_updateCharacteristicsHandler>:

void dataTransfer_updateCharacteristicsHandler(uint8_t dataCharacteristic)
{
    if (dataCharacteristic == '\r')
     2c6:	8d 30       	cpi	r24, 0x0D	; 13
     2c8:	49 f4       	brne	.+18     	; 0x2dc <dataTransfer_updateCharacteristicsHandler+0x16>
    {
        lightCharacteristicHandler[MAX_LOCATION] = END_OF_STRING;
     2ca:	10 92 48 28 	sts	0x2848, r1	; 0x802848 <lightCharacteristicHandler+0x4>
        tempCharacteristicHandler[MAX_LOCATION] = END_OF_STRING;
     2ce:	10 92 43 28 	sts	0x2843, r1	; 0x802843 <tempCharacteristicHandler+0x4>
        
        tempHandlerValueCount = 0;
     2d2:	10 92 3d 28 	sts	0x283D, r1	; 0x80283d <tempHandlerValueCount>
        lightHandlerValueCount = 0;
     2d6:	10 92 3e 28 	sts	0x283E, r1	; 0x80283e <lightHandlerValueCount>
        return;
     2da:	08 95       	ret
    }

    if (tempHandlerValueCount != 0)
     2dc:	90 91 3d 28 	lds	r25, 0x283D	; 0x80283d <tempHandlerValueCount>
     2e0:	99 23       	and	r25, r25
     2e2:	49 f0       	breq	.+18     	; 0x2f6 <dataTransfer_updateCharacteristicsHandler+0x30>
    {
        tempCharacteristicHandler[tempHandlerValueCount - 1] = dataCharacteristic;
     2e4:	e9 2f       	mov	r30, r25
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	e2 5c       	subi	r30, 0xC2	; 194
     2ea:	f7 4d       	sbci	r31, 0xD7	; 215
     2ec:	80 83       	st	Z, r24
        tempHandlerValueCount++;
     2ee:	9f 5f       	subi	r25, 0xFF	; 255
     2f0:	90 93 3d 28 	sts	0x283D, r25	; 0x80283d <tempHandlerValueCount>
     2f4:	0a c0       	rjmp	.+20     	; 0x30a <dataTransfer_updateCharacteristicsHandler+0x44>
    }
    else if (dataCharacteristic == TEMP_COMMAND_HANDLER && tempHandlerValueCount == 0)
     2f6:	84 35       	cpi	r24, 0x54	; 84
     2f8:	41 f4       	brne	.+16     	; 0x30a <dataTransfer_updateCharacteristicsHandler+0x44>
    {
        tempHandlerValueCount++;
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	90 93 3d 28 	sts	0x283D, r25	; 0x80283d <tempHandlerValueCount>
    }
    
    if (lightHandlerValueCount != 0)
     300:	90 91 3e 28 	lds	r25, 0x283E	; 0x80283e <lightHandlerValueCount>
     304:	99 23       	and	r25, r25
     306:	99 f0       	breq	.+38     	; 0x32e <dataTransfer_updateCharacteristicsHandler+0x68>
     308:	04 c0       	rjmp	.+8      	; 0x312 <dataTransfer_updateCharacteristicsHandler+0x4c>
     30a:	90 91 3e 28 	lds	r25, 0x283E	; 0x80283e <lightHandlerValueCount>
     30e:	99 23       	and	r25, r25
     310:	49 f0       	breq	.+18     	; 0x324 <dataTransfer_updateCharacteristicsHandler+0x5e>
    {
        lightCharacteristicHandler[lightHandlerValueCount - 1] = dataCharacteristic;
     312:	e9 2f       	mov	r30, r25
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	ed 5b       	subi	r30, 0xBD	; 189
     318:	f7 4d       	sbci	r31, 0xD7	; 215
     31a:	80 83       	st	Z, r24
        lightHandlerValueCount++;
     31c:	9f 5f       	subi	r25, 0xFF	; 255
     31e:	90 93 3e 28 	sts	0x283E, r25	; 0x80283e <lightHandlerValueCount>
     322:	08 95       	ret
    }   
    else if (dataCharacteristic == LIGHT_COMMAND_HANDLER && lightHandlerValueCount == 0)
     324:	8c 34       	cpi	r24, 0x4C	; 76
     326:	19 f4       	brne	.+6      	; 0x32e <dataTransfer_updateCharacteristicsHandler+0x68>
    {
        lightHandlerValueCount++;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	80 93 3e 28 	sts	0x283E, r24	; 0x80283e <lightHandlerValueCount>
     32e:	08 95       	ret

00000330 <dataTransfer_updateCharacteristicsValues>:
    }
}

void dataTransfer_updateCharacteristicsValues(uint8_t characteristicsType, char sensorValue[5])
{
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	18 2f       	mov	r17, r24
     338:	eb 01       	movw	r28, r22
    rn4871_SendString(characteristicValueUpdate);
     33a:	89 ed       	ldi	r24, 0xD9	; 217
     33c:	96 e5       	ldi	r25, 0x56	; 86
     33e:	0e 94 07 03 	call	0x60e	; 0x60e <rn4871_SendString>
    
    sensorValue[MAX_LOCATION] = END_OF_STRING;
     342:	1c 82       	std	Y+4, r1	; 0x04
    
    if (characteristicsType == LIGHT_COMMAND_HANDLER)
     344:	1c 34       	cpi	r17, 0x4C	; 76
     346:	31 f4       	brne	.+12     	; 0x354 <dataTransfer_updateCharacteristicsValues+0x24>
    {
        rn4871_SendBuffer(lightCharacteristicHandler, MAX_LOCATION);
     348:	64 e0       	ldi	r22, 0x04	; 4
     34a:	84 e4       	ldi	r24, 0x44	; 68
     34c:	98 e2       	ldi	r25, 0x28	; 40
     34e:	0e 94 ed 02 	call	0x5da	; 0x5da <rn4871_SendBuffer>
     352:	05 c0       	rjmp	.+10     	; 0x35e <dataTransfer_updateCharacteristicsValues+0x2e>
    }
    else
    {
        rn4871_SendBuffer(tempCharacteristicHandler, MAX_LOCATION);
     354:	64 e0       	ldi	r22, 0x04	; 4
     356:	8f e3       	ldi	r24, 0x3F	; 63
     358:	98 e2       	ldi	r25, 0x28	; 40
     35a:	0e 94 ed 02 	call	0x5da	; 0x5da <rn4871_SendBuffer>
    }
    
    rn4871_SendString(commandHandlerSeparator);
     35e:	84 ed       	ldi	r24, 0xD4	; 212
     360:	96 e5       	ldi	r25, 0x56	; 86
     362:	0e 94 07 03 	call	0x60e	; 0x60e <rn4871_SendString>
    rn4871_SendString(sensorValue);
     366:	ce 01       	movw	r24, r28
     368:	0e 94 07 03 	call	0x60e	; 0x60e <rn4871_SendString>
    rn4871_SendString(endOfLine);
     36c:	86 ed       	ldi	r24, 0xD6	; 214
     36e:	96 e5       	ldi	r25, 0x56	; 86
     370:	0e 94 07 03 	call	0x60e	; 0x60e <rn4871_SendString>
    RN4871_blockingWait(50);
     374:	82 e3       	ldi	r24, 0x32	; 50
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 05 06 	call	0xc0a	; 0xc0a <RN4871_blockingWait>
}
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	08 95       	ret

00000384 <__vector_7>:
#include <compiler.h>
#include <stdbool.h>
#include "application_handler.h"

ISR(TCA0_OVF_vect)
{
     384:	1f 92       	push	r1
     386:	0f 92       	push	r0
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	0f 92       	push	r0
     38c:	11 24       	eor	r1, r1
     38e:	8f 93       	push	r24
	/* Insert your TCA overflow interrupt handling code */
    applicationEvent = TIME_TO_TRANSMIT_EVENT;
     390:	82 e0       	ldi	r24, 0x02	; 2
     392:	80 93 99 28 	sts	0x2899, r24	; 0x802899 <applicationEvent>
    
	/* The interrupt flag has to be cleared manually */
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     39c:	8f 91       	pop	r24
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <main>:
extern volatile bool newDataFlag;

int main(void)
{          
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     3a8:	0e 94 67 00 	call	0xce	; 0xce <atmel_start_init>
    
    USART_RN4871_set_ISR_cb(dataTransfer_RN4871ToTerminal, RX_CB);
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	85 e3       	ldi	r24, 0x35	; 53
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 9a 06 	call	0xd34	; 0xd34 <USART_RN4871_set_ISR_cb>
    USART_TERMINAL_set_ISR_cb(dataTransfer_terminalToRN4871, RX_CB);
     3b6:	61 e0       	ldi	r22, 0x01	; 1
     3b8:	80 e4       	ldi	r24, 0x40	; 64
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 58 07 	call	0xeb0	; 0xeb0 <USART_TERMINAL_set_ISR_cb>
           
    RN4871_Reset_Module();
     3c0:	0e 94 15 06 	call	0xc2a	; 0xc2a <RN4871_Reset_Module>
    
    applicationEvent = NO_EVENT;
     3c4:	85 e0       	ldi	r24, 0x05	; 5
     3c6:	80 93 99 28 	sts	0x2899, r24	; 0x802899 <applicationEvent>
    
	while (1) {
        if (applicationEvent != NO_EVENT)
     3ca:	80 91 99 28 	lds	r24, 0x2899	; 0x802899 <applicationEvent>
     3ce:	85 30       	cpi	r24, 0x05	; 5
     3d0:	11 f0       	breq	.+4      	; 0x3d6 <main+0x2e>
        {
            updateStateMachine();
     3d2:	0e 94 6a 00 	call	0xd4	; 0xd4 <updateStateMachine>
        }
        
        if (newDataFlag == true)
     3d6:	80 91 3b 28 	lds	r24, 0x283B	; 0x80283b <newDataFlag>
     3da:	88 23       	and	r24, r24
     3dc:	b1 f3       	breq	.-20     	; 0x3ca <main+0x22>
        {
            newDataFlag = false;
     3de:	10 92 3b 28 	sts	0x283B, r1	; 0x80283b <newDataFlag>
            dataTransfer_parseDataFromTerminal();
     3e2:	0e 94 1d 01 	call	0x23a	; 0x23a <dataTransfer_parseDataFromTerminal>
     3e6:	f1 cf       	rjmp	.-30     	; 0x3ca <main+0x22>

000003e8 <SENSORS_getLightValue>:
#define MCP9808_REG_TA 0x05
#define LIGHT_SENSOR_ADC_CHANNEL 5

uint16_t SENSORS_getLightValue(void)
{
	return ADC_0_get_conversion(LIGHT_SENSOR_ADC_CHANNEL);
     3e8:	85 e0       	ldi	r24, 0x05	; 5
     3ea:	0e 94 3b 02 	call	0x476	; 0x476 <ADC_0_get_conversion>
}
     3ee:	08 95       	ret

000003f0 <SENSORS_getTempValue>:

int16_t SENSORS_getTempValue(void)
{
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
	int32_t temperature;

	temperature = I2C_0_read2ByteRegister(MCP9809_ADDR, MCP9808_REG_TA);
     3f4:	65 e0       	ldi	r22, 0x05	; 5
     3f6:	88 e1       	ldi	r24, 0x18	; 24
     3f8:	0e 94 cc 05 	call	0xb98	; 0xb98 <I2C_0_read2ByteRegister>
     3fc:	a0 e0       	ldi	r26, 0x00	; 0
     3fe:	b0 e0       	ldi	r27, 0x00	; 0

    /* Extend int13 to int32 */
	temperature = temperature << 19;
     400:	07 2e       	mov	r0, r23
     402:	73 e1       	ldi	r23, 0x13	; 19
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	aa 1f       	adc	r26, r26
     40a:	bb 1f       	adc	r27, r27
     40c:	7a 95       	dec	r23
     40e:	d1 f7       	brne	.-12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     410:	70 2d       	mov	r23, r0
	temperature = temperature >> 19;
     412:	9c 01       	movw	r18, r24
     414:	ad 01       	movw	r20, r26
     416:	01 2e       	mov	r0, r17
     418:	13 e1       	ldi	r17, 0x13	; 19
     41a:	55 95       	asr	r21
     41c:	47 95       	ror	r20
     41e:	37 95       	ror	r19
     420:	27 95       	ror	r18
     422:	1a 95       	dec	r17
     424:	d1 f7       	brne	.-12     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     426:	10 2d       	mov	r17, r0

    /* For better resolution */
	temperature *= 100;
     428:	a4 e6       	ldi	r26, 0x64	; 100
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	0e 94 1d 08 	call	0x103a	; 0x103a <__muluhisi3>
    
    /* Get temperature in 100x Celsius degree */
	temperature /= 16;

	return temperature;
     430:	8b 01       	movw	r16, r22
     432:	9c 01       	movw	r18, r24
     434:	99 23       	and	r25, r25
     436:	24 f4       	brge	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     438:	01 5f       	subi	r16, 0xF1	; 241
     43a:	1f 4f       	sbci	r17, 0xFF	; 255
     43c:	2f 4f       	sbci	r18, 0xFF	; 255
     43e:	3f 4f       	sbci	r19, 0xFF	; 255
     440:	d9 01       	movw	r26, r18
     442:	c8 01       	movw	r24, r16
     444:	68 94       	set
     446:	13 f8       	bld	r1, 3
     448:	b5 95       	asr	r27
     44a:	a7 95       	ror	r26
     44c:	97 95       	ror	r25
     44e:	87 95       	ror	r24
     450:	16 94       	lsr	r1
     452:	d1 f7       	brne	.-12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
}
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	08 95       	ret

0000045a <ADC_0_init>:
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC0.RES);
}
     45a:	e0 e0       	ldi	r30, 0x00	; 0
     45c:	f6 e0       	ldi	r31, 0x06	; 6
     45e:	83 e1       	ldi	r24, 0x13	; 19
     460:	82 83       	std	Z+2, r24	; 0x02
     462:	85 e0       	ldi	r24, 0x05	; 5
     464:	86 83       	std	Z+6, r24	; 0x06
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 83       	st	Z, r24
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	08 95       	ret

0000046e <ADC_0_is_conversion_done>:
     46e:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
     472:	81 70       	andi	r24, 0x01	; 1
     474:	08 95       	ret

00000476 <ADC_0_get_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS  = channel;
     476:	e0 e0       	ldi	r30, 0x00	; 0
     478:	f6 e0       	ldi	r31, 0x06	; 6
     47a:	86 83       	std	Z+6, r24	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 87       	std	Z+8, r24	; 0x08
adc_result_t ADC_0_get_conversion(adc_0_channel_t channel)
{
	adc_result_t res;

	ADC_0_start_conversion(channel);
	while (!ADC_0_is_conversion_done())
     480:	0e 94 37 02 	call	0x46e	; 0x46e <ADC_0_is_conversion_done>
     484:	88 23       	and	r24, r24
     486:	e1 f3       	breq	.-8      	; 0x480 <ADC_0_get_conversion+0xa>
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC0.RES);
     488:	e0 e0       	ldi	r30, 0x00	; 0
     48a:	f6 e0       	ldi	r31, 0x06	; 6
     48c:	20 89       	ldd	r18, Z+16	; 0x10
     48e:	31 89       	ldd	r19, Z+17	; 0x11

	ADC_0_start_conversion(channel);
	while (!ADC_0_is_conversion_done())
		;
	res = ADC_0_get_conversion_result();
	ADC0.INTFLAGS |= ADC_RESRDY_bm;
     490:	93 85       	ldd	r25, Z+11	; 0x0b
     492:	91 60       	ori	r25, 0x01	; 1
     494:	93 87       	std	Z+11, r25	; 0x0b
	return res;
}
     496:	c9 01       	movw	r24, r18
     498:	08 95       	ret

0000049a <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	08 95       	ret

0000049e <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     49e:	41 e0       	ldi	r20, 0x01	; 1
     4a0:	68 ed       	ldi	r22, 0xD8	; 216
     4a2:	81 e6       	ldi	r24, 0x61	; 97
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 01 06 	call	0xc02	; 0xc02 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	08 95       	ret

000004ae <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     4ae:	78 94       	sei

	return 0;
}
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	08 95       	ret

000004b4 <mcu_init>:
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     4b4:	e0 e1       	ldi	r30, 0x10	; 16
     4b6:	f4 e0       	ldi	r31, 0x04	; 4
     4b8:	80 81       	ld	r24, Z
     4ba:	88 60       	ori	r24, 0x08	; 8
     4bc:	81 93       	st	Z+, r24
     4be:	e8 31       	cpi	r30, 0x18	; 24
     4c0:	84 e0       	ldi	r24, 0x04	; 4
     4c2:	f8 07       	cpc	r31, r24
     4c4:	c9 f7       	brne	.-14     	; 0x4b8 <mcu_init+0x4>
     4c6:	e0 e3       	ldi	r30, 0x30	; 48
     4c8:	f4 e0       	ldi	r31, 0x04	; 4
     4ca:	80 81       	ld	r24, Z
     4cc:	88 60       	ori	r24, 0x08	; 8
     4ce:	81 93       	st	Z+, r24
     4d0:	e8 33       	cpi	r30, 0x38	; 56
     4d2:	84 e0       	ldi	r24, 0x04	; 4
     4d4:	f8 07       	cpc	r31, r24
     4d6:	c9 f7       	brne	.-14     	; 0x4ca <mcu_init+0x16>
     4d8:	e0 e5       	ldi	r30, 0x50	; 80
     4da:	f4 e0       	ldi	r31, 0x04	; 4
     4dc:	80 81       	ld	r24, Z
     4de:	88 60       	ori	r24, 0x08	; 8
     4e0:	81 93       	st	Z+, r24
     4e2:	e8 35       	cpi	r30, 0x58	; 88
     4e4:	84 e0       	ldi	r24, 0x04	; 4
     4e6:	f8 07       	cpc	r31, r24
     4e8:	c9 f7       	brne	.-14     	; 0x4dc <mcu_init+0x28>
     4ea:	e0 e7       	ldi	r30, 0x70	; 112
     4ec:	f4 e0       	ldi	r31, 0x04	; 4
     4ee:	80 81       	ld	r24, Z
     4f0:	88 60       	ori	r24, 0x08	; 8
     4f2:	81 93       	st	Z+, r24
     4f4:	e8 37       	cpi	r30, 0x78	; 120
     4f6:	84 e0       	ldi	r24, 0x04	; 4
     4f8:	f8 07       	cpc	r31, r24
     4fa:	c9 f7       	brne	.-14     	; 0x4ee <mcu_init+0x3a>
     4fc:	e0 e9       	ldi	r30, 0x90	; 144
     4fe:	f4 e0       	ldi	r31, 0x04	; 4
     500:	80 81       	ld	r24, Z
     502:	88 60       	ori	r24, 0x08	; 8
     504:	81 93       	st	Z+, r24
     506:	e8 39       	cpi	r30, 0x98	; 152
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	f8 07       	cpc	r31, r24
     50c:	c9 f7       	brne	.-14     	; 0x500 <mcu_init+0x4c>
     50e:	e0 eb       	ldi	r30, 0xB0	; 176
     510:	f4 e0       	ldi	r31, 0x04	; 4
     512:	80 81       	ld	r24, Z
     514:	88 60       	ori	r24, 0x08	; 8
     516:	81 93       	st	Z+, r24
     518:	e8 3b       	cpi	r30, 0xB8	; 184
     51a:	84 e0       	ldi	r24, 0x04	; 4
     51c:	f8 07       	cpc	r31, r24
     51e:	c9 f7       	brne	.-14     	; 0x512 <mcu_init+0x5e>
     520:	08 95       	ret

00000522 <ADC_0_initialization>:
     522:	e5 e7       	ldi	r30, 0x75	; 117
     524:	f4 e0       	ldi	r31, 0x04	; 4
     526:	80 81       	ld	r24, Z
     528:	88 7f       	andi	r24, 0xF8	; 248
     52a:	84 60       	ori	r24, 0x04	; 4
     52c:	80 83       	st	Z, r24
     52e:	80 81       	ld	r24, Z
     530:	87 7f       	andi	r24, 0xF7	; 247
     532:	80 83       	st	Z, r24
     534:	0e 94 2d 02 	call	0x45a	; 0x45a <ADC_0_init>
     538:	08 95       	ret

0000053a <USART_RN4871_initialization>:
     53a:	41 98       	cbi	0x08, 1	; 8
     53c:	e1 e5       	ldi	r30, 0x51	; 81
     53e:	f4 e0       	ldi	r31, 0x04	; 4
     540:	80 81       	ld	r24, Z
     542:	87 7f       	andi	r24, 0xF7	; 247
     544:	80 83       	st	Z, r24
     546:	40 9a       	sbi	0x08, 0	; 8
     548:	48 98       	cbi	0x09, 0	; 9
     54a:	0e 94 38 07 	call	0xe70	; 0xe70 <USART_RN4871_init>
     54e:	08 95       	ret

00000550 <USART_TERMINAL_initialization>:
     550:	a1 98       	cbi	0x14, 1	; 20
     552:	e1 eb       	ldi	r30, 0xB1	; 177
     554:	f4 e0       	ldi	r31, 0x04	; 4
     556:	80 81       	ld	r24, Z
     558:	87 7f       	andi	r24, 0xF7	; 247
     55a:	80 83       	st	Z, r24
     55c:	a0 9a       	sbi	0x14, 0	; 20
     55e:	a8 98       	cbi	0x15, 0	; 21
     560:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <USART_TERMINAL_init>
     564:	08 95       	ret

00000566 <I2C_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     566:	03 9a       	sbi	0x00, 3	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     568:	0b 98       	cbi	0x01, 3	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     56a:	e3 e1       	ldi	r30, 0x13	; 19
     56c:	f4 e0       	ldi	r31, 0x04	; 4
     56e:	80 81       	ld	r24, Z
     570:	87 7f       	andi	r24, 0xF7	; 247
     572:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     574:	80 81       	ld	r24, Z
     576:	8f 77       	andi	r24, 0x7F	; 127
     578:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     57a:	80 81       	ld	r24, Z
     57c:	88 7f       	andi	r24, 0xF8	; 248
     57e:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     580:	02 9a       	sbi	0x00, 2	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     582:	0a 98       	cbi	0x01, 2	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     584:	e2 e1       	ldi	r30, 0x12	; 18
     586:	f4 e0       	ldi	r31, 0x04	; 4
     588:	80 81       	ld	r24, Z
     58a:	87 7f       	andi	r24, 0xF7	; 247
     58c:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     58e:	80 81       	ld	r24, Z
     590:	8f 77       	andi	r24, 0x7F	; 127
     592:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     594:	80 81       	ld	r24, Z
     596:	88 7f       	andi	r24, 0xF8	; 248
     598:	80 83       	st	Z, r24
	    // <PORT_ISC_FALLING_gc"> Sense Falling Edge
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	I2C_0_init();
     59a:	0e 94 07 05 	call	0xa0e	; 0xa0e <I2C_0_init>
     59e:	08 95       	ret

000005a0 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     5a0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <mcu_init>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     5a4:	00 9a       	sbi	0x00, 0	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     5a6:	08 98       	cbi	0x01, 0	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     5a8:	04 9a       	sbi	0x00, 4	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     5aa:	0c 98       	cbi	0x01, 4	; 1
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
     5ac:	0e 94 4f 02 	call	0x49e	; 0x49e <CLKCTRL_init>

	ADC_0_initialization();
     5b0:	0e 94 91 02 	call	0x522	; 0x522 <ADC_0_initialization>

	USART_RN4871_initialization();
     5b4:	0e 94 9d 02 	call	0x53a	; 0x53a <USART_RN4871_initialization>

	USART_TERMINAL_initialization();
     5b8:	0e 94 a8 02 	call	0x550	; 0x550 <USART_TERMINAL_initialization>
}

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     5bc:	0e 94 24 06 	call	0xc48	; 0xc48 <TIMER_0_init>

	USART_TERMINAL_initialization();

	TIMER_0_initialization();

	CPUINT_init();
     5c0:	0e 94 57 02 	call	0x4ae	; 0x4ae <CPUINT_init>

	SLPCTRL_init();
     5c4:	0e 94 22 06 	call	0xc44	; 0xc44 <SLPCTRL_init>

	I2C_0_initialization();
     5c8:	0e 94 b3 02 	call	0x566	; 0x566 <I2C_0_initialization>

	BOD_init();
     5cc:	0e 94 4d 02 	call	0x49a	; 0x49a <BOD_init>
     5d0:	08 95       	ret

000005d2 <rn4871_ClearResetPin>:
     5d2:	08 98       	cbi	0x01, 0	; 1
     5d4:	08 95       	ret

000005d6 <rn4871_SetResetPin>:
     5d6:	08 9a       	sbi	0x01, 0	; 1
     5d8:	08 95       	ret

000005da <rn4871_SendBuffer>:
{
	rn4871_SendBuffer(command, strlen(command));
}

void rn4871_SendBuffer(const char *buffer, uint8_t length)
{
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
	while (length--)
     5e2:	4f ef       	ldi	r20, 0xFF	; 255
     5e4:	46 0f       	add	r20, r22
     5e6:	66 23       	and	r22, r22
     5e8:	69 f0       	breq	.+26     	; 0x604 <rn4871_SendBuffer+0x2a>
     5ea:	ec 01       	movw	r28, r24
     5ec:	04 2f       	mov	r16, r20
     5ee:	10 e0       	ldi	r17, 0x00	; 0
     5f0:	0f 5f       	subi	r16, 0xFF	; 255
     5f2:	1f 4f       	sbci	r17, 0xFF	; 255
     5f4:	08 0f       	add	r16, r24
     5f6:	19 1f       	adc	r17, r25
		rn4871_SendByte(*buffer++);
}

void rn4871_SendByte(uint8_t data)
{
	USART_RN4871_write(data);
     5f8:	89 91       	ld	r24, Y+
     5fa:	0e 94 14 07 	call	0xe28	; 0xe28 <USART_RN4871_write>
	rn4871_SendBuffer(command, strlen(command));
}

void rn4871_SendBuffer(const char *buffer, uint8_t length)
{
	while (length--)
     5fe:	c0 17       	cp	r28, r16
     600:	d1 07       	cpc	r29, r17
     602:	d1 f7       	brne	.-12     	; 0x5f8 <rn4871_SendBuffer+0x1e>
		rn4871_SendByte(*buffer++);
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	08 95       	ret

0000060e <rn4871_SendString>:
	INIT_LED_set_level(level);
}

void rn4871_SendString(const char *command)
{
	rn4871_SendBuffer(command, strlen(command));
     60e:	fc 01       	movw	r30, r24
     610:	01 90       	ld	r0, Z+
     612:	00 20       	and	r0, r0
     614:	e9 f7       	brne	.-6      	; 0x610 <rn4871_SendString+0x2>
     616:	31 97       	sbiw	r30, 0x01	; 1
     618:	bf 01       	movw	r22, r30
     61a:	68 1b       	sub	r22, r24
     61c:	79 0b       	sbc	r23, r25
     61e:	0e 94 ed 02 	call	0x5da	; 0x5da <rn4871_SendBuffer>
     622:	08 95       	ret

00000624 <rn4871_SendByte>:
		rn4871_SendByte(*buffer++);
}

void rn4871_SendByte(uint8_t data)
{
	USART_RN4871_write(data);
     624:	0e 94 14 07 	call	0xe28	; 0xe28 <USART_RN4871_write>
     628:	08 95       	ret

0000062a <I2C_0_do_I2C_RESET>:
 * \brief Identical to I2C_0_master_operation(true);
 */
i2c_error_t I2C_0_master_read(void)
{
	return I2C_0_master_operation(true);
}
     62a:	e0 ea       	ldi	r30, 0xA0	; 160
     62c:	f8 e0       	ldi	r31, 0x08	; 8
     62e:	84 81       	ldd	r24, Z+4	; 0x04
     630:	88 60       	ori	r24, 0x08	; 8
     632:	84 83       	std	Z+4, r24	; 0x04
     634:	85 81       	ldd	r24, Z+5	; 0x05
     636:	81 60       	ori	r24, 0x01	; 1
     638:	85 83       	std	Z+5, r24	; 0x05
     63a:	e9 e4       	ldi	r30, 0x49	; 73
     63c:	f8 e2       	ldi	r31, 0x28	; 40
     63e:	80 81       	ld	r24, Z
     640:	8e 7f       	andi	r24, 0xFE	; 254
     642:	80 83       	st	Z, r24
     644:	13 86       	std	Z+11, r1	; 0x0b
     646:	8e e0       	ldi	r24, 0x0E	; 14
     648:	08 95       	ret

0000064a <I2C_0_do_I2C_IDLE>:
     64a:	e9 e4       	ldi	r30, 0x49	; 73
     64c:	f8 e2       	ldi	r31, 0x28	; 40
     64e:	80 81       	ld	r24, Z
     650:	8e 7f       	andi	r24, 0xFE	; 254
     652:	80 83       	st	Z, r24
     654:	13 86       	std	Z+11, r1	; 0x0b
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	08 95       	ret

0000065a <I2C_0_do_I2C_SEND_ADR_READ>:
     65a:	e9 e4       	ldi	r30, 0x49	; 73
     65c:	f8 e2       	ldi	r31, 0x28	; 40
     65e:	80 81       	ld	r24, Z
     660:	88 60       	ori	r24, 0x08	; 8
     662:	80 83       	st	Z, r24
     664:	81 81       	ldd	r24, Z+1	; 0x01
     666:	88 0f       	add	r24, r24
     668:	81 60       	ori	r24, 0x01	; 1
     66a:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
     66e:	84 e0       	ldi	r24, 0x04	; 4
     670:	08 95       	ret

00000672 <I2C_0_do_I2C_SEND_RESTART>:
     672:	0e 94 2d 03 	call	0x65a	; 0x65a <I2C_0_do_I2C_SEND_ADR_READ>
     676:	08 95       	ret

00000678 <I2C_0_do_I2C_SEND_RESTART_READ>:
     678:	0e 94 2d 03 	call	0x65a	; 0x65a <I2C_0_do_I2C_SEND_ADR_READ>
     67c:	08 95       	ret

0000067e <I2C_0_do_I2C_SEND_ADR_WRITE>:
     67e:	e9 e4       	ldi	r30, 0x49	; 73
     680:	f8 e2       	ldi	r31, 0x28	; 40
     682:	80 81       	ld	r24, Z
     684:	88 60       	ori	r24, 0x08	; 8
     686:	80 83       	st	Z, r24
     688:	81 81       	ldd	r24, Z+1	; 0x01
     68a:	88 0f       	add	r24, r24
     68c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
     690:	83 e0       	ldi	r24, 0x03	; 3
     692:	08 95       	ret

00000694 <I2C_0_do_I2C_SEND_RESTART_WRITE>:
     694:	0e 94 3f 03 	call	0x67e	; 0x67e <I2C_0_do_I2C_SEND_ADR_WRITE>
     698:	08 95       	ret

0000069a <I2C_0_do_I2C_RX_DO_ACK>:
     69a:	e0 ea       	ldi	r30, 0xA0	; 160
     69c:	f8 e0       	ldi	r31, 0x08	; 8
     69e:	84 81       	ldd	r24, Z+4	; 0x04
     6a0:	8b 7f       	andi	r24, 0xFB	; 251
     6a2:	84 83       	std	Z+4, r24	; 0x04
     6a4:	84 e0       	ldi	r24, 0x04	; 4
     6a6:	08 95       	ret

000006a8 <I2C_0_do_I2C_TX_DO_ACK>:
     6a8:	e0 ea       	ldi	r30, 0xA0	; 160
     6aa:	f8 e0       	ldi	r31, 0x08	; 8
     6ac:	84 81       	ldd	r24, Z+4	; 0x04
     6ae:	8b 7f       	andi	r24, 0xFB	; 251
     6b0:	84 83       	std	Z+4, r24	; 0x04
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	08 95       	ret

000006b6 <I2C_0_do_I2C_DO_NACK_RESTART>:
     6b6:	e0 ea       	ldi	r30, 0xA0	; 160
     6b8:	f8 e0       	ldi	r31, 0x08	; 8
     6ba:	84 81       	ldd	r24, Z+4	; 0x04
     6bc:	84 60       	ori	r24, 0x04	; 4
     6be:	84 83       	std	Z+4, r24	; 0x04
     6c0:	88 e0       	ldi	r24, 0x08	; 8
     6c2:	08 95       	ret

000006c4 <I2C_0_do_I2C_BUS_ERROR>:
     6c4:	e0 ea       	ldi	r30, 0xA0	; 160
     6c6:	f8 e0       	ldi	r31, 0x08	; 8
     6c8:	84 81       	ldd	r24, Z+4	; 0x04
     6ca:	88 60       	ori	r24, 0x08	; 8
     6cc:	84 83       	std	Z+4, r24	; 0x04
     6ce:	85 81       	ldd	r24, Z+5	; 0x05
     6d0:	81 60       	ori	r24, 0x01	; 1
     6d2:	85 83       	std	Z+5, r24	; 0x05
     6d4:	e9 e4       	ldi	r30, 0x49	; 73
     6d6:	f8 e2       	ldi	r31, 0x28	; 40
     6d8:	80 81       	ld	r24, Z
     6da:	8e 7f       	andi	r24, 0xFE	; 254
     6dc:	80 83       	st	Z, r24
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	83 87       	std	Z+11, r24	; 0x0b
     6e2:	8e e0       	ldi	r24, 0x0E	; 14
     6e4:	08 95       	ret

000006e6 <I2C_0_master_isr>:
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	e0 ea       	ldi	r30, 0xA0	; 160
     6ec:	f8 e0       	ldi	r31, 0x08	; 8
     6ee:	85 81       	ldd	r24, Z+5	; 0x05
     6f0:	80 6c       	ori	r24, 0xC0	; 192
     6f2:	85 83       	std	Z+5, r24	; 0x05
     6f4:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <I2C_0_status>
     6f8:	83 ff       	sbrs	r24, 3
     6fa:	07 c0       	rjmp	.+14     	; 0x70a <I2C_0_master_isr+0x24>
     6fc:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     700:	84 ff       	sbrs	r24, 4
     702:	03 c0       	rjmp	.+6      	; 0x70a <I2C_0_master_isr+0x24>
     704:	8f e0       	ldi	r24, 0x0F	; 15
     706:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <I2C_0_status+0xa>
     70a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     70e:	83 ff       	sbrs	r24, 3
     710:	03 c0       	rjmp	.+6      	; 0x718 <I2C_0_master_isr+0x32>
     712:	80 e1       	ldi	r24, 0x10	; 16
     714:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <I2C_0_status+0xa>
     718:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     71c:	82 ff       	sbrs	r24, 2
     71e:	03 c0       	rjmp	.+6      	; 0x726 <I2C_0_master_isr+0x40>
     720:	81 e1       	ldi	r24, 0x11	; 17
     722:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <I2C_0_status+0xa>
     726:	c9 e4       	ldi	r28, 0x49	; 73
     728:	d8 e2       	ldi	r29, 0x28	; 40
     72a:	ea 85       	ldd	r30, Y+10	; 0x0a
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	e0 50       	subi	r30, 0x00	; 0
     734:	f8 4d       	sbci	r31, 0xD8	; 216
     736:	01 90       	ld	r0, Z+
     738:	f0 81       	ld	r31, Z
     73a:	e0 2d       	mov	r30, r0
     73c:	09 95       	icall
     73e:	8a 87       	std	Y+10, r24	; 0x0a
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <I2C_0_return_stop>:
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	08 95       	ret

0000074a <I2C_0_return_reset>:
     74a:	85 e0       	ldi	r24, 0x05	; 5
     74c:	08 95       	ret

0000074e <I2C_0_set_callback>:
     74e:	61 15       	cp	r22, r1
     750:	71 05       	cpc	r23, r1
     752:	81 f0       	breq	.+32     	; 0x774 <I2C_0_set_callback+0x26>
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	fc 01       	movw	r30, r24
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	eb 5a       	subi	r30, 0xAB	; 171
     75e:	f7 4d       	sbci	r31, 0xD7	; 215
     760:	60 83       	st	Z, r22
     762:	71 83       	std	Z+1, r23	; 0x01
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	fc 01       	movw	r30, r24
     76a:	ef 59       	subi	r30, 0x9F	; 159
     76c:	f7 4d       	sbci	r31, 0xD7	; 215
     76e:	40 83       	st	Z, r20
     770:	51 83       	std	Z+1, r21	; 0x01
     772:	08 95       	ret
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	fc 01       	movw	r30, r24
     778:	ee 0f       	add	r30, r30
     77a:	ff 1f       	adc	r31, r31
     77c:	eb 5a       	subi	r30, 0xAB	; 171
     77e:	f7 4d       	sbci	r31, 0xD7	; 215
     780:	23 ea       	ldi	r18, 0xA3	; 163
     782:	33 e0       	ldi	r19, 0x03	; 3
     784:	20 83       	st	Z, r18
     786:	31 83       	std	Z+1, r19	; 0x01
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	fc 01       	movw	r30, r24
     78e:	ef 59       	subi	r30, 0x9F	; 159
     790:	f7 4d       	sbci	r31, 0xD7	; 215
     792:	10 82       	st	Z, r1
     794:	11 82       	std	Z+1, r1	; 0x01
     796:	08 95       	ret

00000798 <I2C_0_do_I2C_BUS_COLLISION>:
     798:	e0 ea       	ldi	r30, 0xA0	; 160
     79a:	f8 e0       	ldi	r31, 0x08	; 8
     79c:	85 81       	ldd	r24, Z+5	; 0x05
     79e:	88 60       	ori	r24, 0x08	; 8
     7a0:	85 83       	std	Z+5, r24	; 0x05
     7a2:	a9 e4       	ldi	r26, 0x49	; 73
     7a4:	b8 e2       	ldi	r27, 0x28	; 40
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	1b 96       	adiw	r26, 0x0b	; 11
     7aa:	8c 93       	st	X, r24
     7ac:	1b 97       	sbiw	r26, 0x0b	; 11
     7ae:	1e 96       	adiw	r26, 0x0e	; 14
     7b0:	ed 91       	ld	r30, X+
     7b2:	fc 91       	ld	r31, X
     7b4:	1f 97       	sbiw	r26, 0x0f	; 15
     7b6:	5a 96       	adiw	r26, 0x1a	; 26
     7b8:	8d 91       	ld	r24, X+
     7ba:	9c 91       	ld	r25, X
     7bc:	5b 97       	sbiw	r26, 0x1b	; 27
     7be:	09 95       	icall
     7c0:	82 30       	cpi	r24, 0x02	; 2
     7c2:	19 f0       	breq	.+6      	; 0x7ca <I2C_0_do_I2C_BUS_COLLISION+0x32>
     7c4:	83 30       	cpi	r24, 0x03	; 3
     7c6:	21 f0       	breq	.+8      	; 0x7d0 <I2C_0_do_I2C_BUS_COLLISION+0x38>
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <I2C_0_do_I2C_BUS_COLLISION+0x3e>
     7ca:	0e 94 2d 03 	call	0x65a	; 0x65a <I2C_0_do_I2C_SEND_ADR_READ>
     7ce:	08 95       	ret
     7d0:	0e 94 3f 03 	call	0x67e	; 0x67e <I2C_0_do_I2C_SEND_ADR_WRITE>
     7d4:	08 95       	ret
     7d6:	0e 94 15 03 	call	0x62a	; 0x62a <I2C_0_do_I2C_RESET>
     7da:	08 95       	ret

000007dc <I2C_0_do_I2C_DO_NACK_STOP>:
     7dc:	e0 ea       	ldi	r30, 0xA0	; 160
     7de:	f8 e0       	ldi	r31, 0x08	; 8
     7e0:	84 81       	ldd	r24, Z+4	; 0x04
     7e2:	84 60       	ori	r24, 0x04	; 4
     7e4:	84 83       	std	Z+4, r24	; 0x04
     7e6:	84 81       	ldd	r24, Z+4	; 0x04
     7e8:	83 60       	ori	r24, 0x03	; 3
     7ea:	84 83       	std	Z+4, r24	; 0x04
     7ec:	e9 e4       	ldi	r30, 0x49	; 73
     7ee:	f8 e2       	ldi	r31, 0x28	; 40
     7f0:	80 81       	ld	r24, Z
     7f2:	8e 7f       	andi	r24, 0xFE	; 254
     7f4:	80 83       	st	Z, r24
     7f6:	13 86       	std	Z+11, r1	; 0x0b
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	08 95       	ret

000007fc <I2C_0_do_I2C_RX>:
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	e9 e4       	ldi	r30, 0x49	; 73
     802:	f8 e2       	ldi	r31, 0x28	; 40
     804:	80 81       	ld	r24, Z
     806:	87 7f       	andi	r24, 0xF7	; 247
     808:	80 83       	st	Z, r24
     80a:	84 81       	ldd	r24, Z+4	; 0x04
     80c:	95 81       	ldd	r25, Z+5	; 0x05
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	31 f4       	brne	.+12     	; 0x81e <I2C_0_do_I2C_RX+0x22>
     812:	e0 ea       	ldi	r30, 0xA0	; 160
     814:	f8 e0       	ldi	r31, 0x08	; 8
     816:	84 81       	ldd	r24, Z+4	; 0x04
     818:	84 60       	ori	r24, 0x04	; 4
     81a:	84 83       	std	Z+4, r24	; 0x04
     81c:	05 c0       	rjmp	.+10     	; 0x828 <I2C_0_do_I2C_RX+0x2c>
     81e:	e0 ea       	ldi	r30, 0xA0	; 160
     820:	f8 e0       	ldi	r31, 0x08	; 8
     822:	84 81       	ldd	r24, Z+4	; 0x04
     824:	8b 7f       	andi	r24, 0xFB	; 251
     826:	84 83       	std	Z+4, r24	; 0x04
     828:	e9 e4       	ldi	r30, 0x49	; 73
     82a:	f8 e2       	ldi	r31, 0x28	; 40
     82c:	84 81       	ldd	r24, Z+4	; 0x04
     82e:	95 81       	ldd	r25, Z+5	; 0x05
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	84 83       	std	Z+4, r24	; 0x04
     834:	95 83       	std	Z+5, r25	; 0x05
     836:	89 2b       	or	r24, r25
     838:	a9 f0       	breq	.+42     	; 0x864 <I2C_0_do_I2C_RX+0x68>
     83a:	df 01       	movw	r26, r30
     83c:	c2 81       	ldd	r28, Z+2	; 0x02
     83e:	d3 81       	ldd	r29, Z+3	; 0x03
     840:	e0 ea       	ldi	r30, 0xA0	; 160
     842:	f8 e0       	ldi	r31, 0x08	; 8
     844:	80 85       	ldd	r24, Z+8	; 0x08
     846:	88 83       	st	Y, r24
     848:	12 96       	adiw	r26, 0x02	; 2
     84a:	8d 91       	ld	r24, X+
     84c:	9c 91       	ld	r25, X
     84e:	13 97       	sbiw	r26, 0x03	; 3
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	12 96       	adiw	r26, 0x02	; 2
     854:	8d 93       	st	X+, r24
     856:	9c 93       	st	X, r25
     858:	13 97       	sbiw	r26, 0x03	; 3
     85a:	84 81       	ldd	r24, Z+4	; 0x04
     85c:	82 60       	ori	r24, 0x02	; 2
     85e:	84 83       	std	Z+4, r24	; 0x04
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	26 c0       	rjmp	.+76     	; 0x8b0 <I2C_0_do_I2C_RX+0xb4>
     864:	a9 e4       	ldi	r26, 0x49	; 73
     866:	b8 e2       	ldi	r27, 0x28	; 40
     868:	12 96       	adiw	r26, 0x02	; 2
     86a:	ed 91       	ld	r30, X+
     86c:	fc 91       	ld	r31, X
     86e:	13 97       	sbiw	r26, 0x03	; 3
     870:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7008a8>
     874:	80 83       	st	Z, r24
     876:	12 96       	adiw	r26, 0x02	; 2
     878:	8d 91       	ld	r24, X+
     87a:	9c 91       	ld	r25, X
     87c:	13 97       	sbiw	r26, 0x03	; 3
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	12 96       	adiw	r26, 0x02	; 2
     882:	8d 93       	st	X+, r24
     884:	9c 93       	st	X, r25
     886:	13 97       	sbiw	r26, 0x03	; 3
     888:	8c 91       	ld	r24, X
     88a:	84 60       	ori	r24, 0x04	; 4
     88c:	8c 93       	st	X, r24
     88e:	1c 96       	adiw	r26, 0x0c	; 12
     890:	ed 91       	ld	r30, X+
     892:	fc 91       	ld	r31, X
     894:	1d 97       	sbiw	r26, 0x0d	; 13
     896:	58 96       	adiw	r26, 0x18	; 24
     898:	8d 91       	ld	r24, X+
     89a:	9c 91       	ld	r25, X
     89c:	59 97       	sbiw	r26, 0x19	; 25
     89e:	09 95       	icall
     8a0:	82 50       	subi	r24, 0x02	; 2
     8a2:	82 30       	cpi	r24, 0x02	; 2
     8a4:	18 f4       	brcc	.+6      	; 0x8ac <I2C_0_do_I2C_RX+0xb0>
     8a6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <I2C_0_do_I2C_DO_NACK_RESTART>
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <I2C_0_do_I2C_RX+0xb4>
     8ac:	0e 94 ee 03 	call	0x7dc	; 0x7dc <I2C_0_do_I2C_DO_NACK_STOP>
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <I2C_0_do_I2C_SEND_STOP>:
     8b6:	e0 ea       	ldi	r30, 0xA0	; 160
     8b8:	f8 e0       	ldi	r31, 0x08	; 8
     8ba:	84 81       	ldd	r24, Z+4	; 0x04
     8bc:	83 60       	ori	r24, 0x03	; 3
     8be:	84 83       	std	Z+4, r24	; 0x04
     8c0:	e9 e4       	ldi	r30, 0x49	; 73
     8c2:	f8 e2       	ldi	r31, 0x28	; 40
     8c4:	80 81       	ld	r24, Z
     8c6:	8e 7f       	andi	r24, 0xFE	; 254
     8c8:	80 83       	st	Z, r24
     8ca:	13 86       	std	Z+11, r1	; 0x0b
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	08 95       	ret

000008d0 <I2C_0_do_I2C_DO_ADDRESS_NACK>:
     8d0:	a9 e4       	ldi	r26, 0x49	; 73
     8d2:	b8 e2       	ldi	r27, 0x28	; 40
     8d4:	8c 91       	ld	r24, X
     8d6:	87 7f       	andi	r24, 0xF7	; 247
     8d8:	8c 93       	st	X, r24
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	1b 96       	adiw	r26, 0x0b	; 11
     8de:	8c 93       	st	X, r24
     8e0:	1b 97       	sbiw	r26, 0x0b	; 11
     8e2:	50 96       	adiw	r26, 0x10	; 16
     8e4:	ed 91       	ld	r30, X+
     8e6:	fc 91       	ld	r31, X
     8e8:	51 97       	sbiw	r26, 0x11	; 17
     8ea:	5c 96       	adiw	r26, 0x1c	; 28
     8ec:	8d 91       	ld	r24, X+
     8ee:	9c 91       	ld	r25, X
     8f0:	5d 97       	sbiw	r26, 0x1d	; 29
     8f2:	09 95       	icall
     8f4:	82 30       	cpi	r24, 0x02	; 2
     8f6:	19 f0       	breq	.+6      	; 0x8fe <I2C_0_do_I2C_DO_ADDRESS_NACK+0x2e>
     8f8:	83 30       	cpi	r24, 0x03	; 3
     8fa:	21 f0       	breq	.+8      	; 0x904 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x34>
     8fc:	06 c0       	rjmp	.+12     	; 0x90a <I2C_0_do_I2C_DO_ADDRESS_NACK+0x3a>
     8fe:	0e 94 2d 03 	call	0x65a	; 0x65a <I2C_0_do_I2C_SEND_ADR_READ>
     902:	08 95       	ret
     904:	0e 94 3f 03 	call	0x67e	; 0x67e <I2C_0_do_I2C_SEND_ADR_WRITE>
     908:	08 95       	ret
     90a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <I2C_0_do_I2C_SEND_STOP>
     90e:	08 95       	ret

00000910 <I2C_0_do_I2C_TX>:
     910:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     914:	84 ff       	sbrs	r24, 4
     916:	19 c0       	rjmp	.+50     	; 0x94a <I2C_0_do_I2C_TX+0x3a>
     918:	a9 e4       	ldi	r26, 0x49	; 73
     91a:	b8 e2       	ldi	r27, 0x28	; 40
     91c:	52 96       	adiw	r26, 0x12	; 18
     91e:	ed 91       	ld	r30, X+
     920:	fc 91       	ld	r31, X
     922:	53 97       	sbiw	r26, 0x13	; 19
     924:	5e 96       	adiw	r26, 0x1e	; 30
     926:	8d 91       	ld	r24, X+
     928:	9c 91       	ld	r25, X
     92a:	5f 97       	sbiw	r26, 0x1f	; 31
     92c:	09 95       	icall
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	19 f0       	breq	.+6      	; 0x938 <I2C_0_do_I2C_TX+0x28>
     932:	83 30       	cpi	r24, 0x03	; 3
     934:	21 f0       	breq	.+8      	; 0x93e <I2C_0_do_I2C_TX+0x2e>
     936:	06 c0       	rjmp	.+12     	; 0x944 <I2C_0_do_I2C_TX+0x34>
     938:	0e 94 2d 03 	call	0x65a	; 0x65a <I2C_0_do_I2C_SEND_ADR_READ>
     93c:	08 95       	ret
     93e:	0e 94 3f 03 	call	0x67e	; 0x67e <I2C_0_do_I2C_SEND_ADR_WRITE>
     942:	08 95       	ret
     944:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <I2C_0_do_I2C_SEND_STOP>
     948:	08 95       	ret
     94a:	e9 e4       	ldi	r30, 0x49	; 73
     94c:	f8 e2       	ldi	r31, 0x28	; 40
     94e:	80 81       	ld	r24, Z
     950:	87 7f       	andi	r24, 0xF7	; 247
     952:	80 83       	st	Z, r24
     954:	a2 81       	ldd	r26, Z+2	; 0x02
     956:	b3 81       	ldd	r27, Z+3	; 0x03
     958:	cd 01       	movw	r24, r26
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	82 83       	std	Z+2, r24	; 0x02
     95e:	93 83       	std	Z+3, r25	; 0x03
     960:	8c 91       	ld	r24, X
     962:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7008a8>
     966:	84 81       	ldd	r24, Z+4	; 0x04
     968:	95 81       	ldd	r25, Z+5	; 0x05
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	84 83       	std	Z+4, r24	; 0x04
     96e:	95 83       	std	Z+5, r25	; 0x05
     970:	89 2b       	or	r24, r25
     972:	11 f4       	brne	.+4      	; 0x978 <I2C_0_do_I2C_TX+0x68>
     974:	85 e0       	ldi	r24, 0x05	; 5
     976:	08 95       	ret
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	08 95       	ret

0000097c <I2C_0_do_I2C_TX_EMPTY>:
     97c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     980:	84 ff       	sbrs	r24, 4
     982:	19 c0       	rjmp	.+50     	; 0x9b6 <I2C_0_do_I2C_TX_EMPTY+0x3a>
     984:	a9 e4       	ldi	r26, 0x49	; 73
     986:	b8 e2       	ldi	r27, 0x28	; 40
     988:	52 96       	adiw	r26, 0x12	; 18
     98a:	ed 91       	ld	r30, X+
     98c:	fc 91       	ld	r31, X
     98e:	53 97       	sbiw	r26, 0x13	; 19
     990:	5e 96       	adiw	r26, 0x1e	; 30
     992:	8d 91       	ld	r24, X+
     994:	9c 91       	ld	r25, X
     996:	5f 97       	sbiw	r26, 0x1f	; 31
     998:	09 95       	icall
     99a:	82 30       	cpi	r24, 0x02	; 2
     99c:	19 f0       	breq	.+6      	; 0x9a4 <I2C_0_do_I2C_TX_EMPTY+0x28>
     99e:	83 30       	cpi	r24, 0x03	; 3
     9a0:	21 f0       	breq	.+8      	; 0x9aa <I2C_0_do_I2C_TX_EMPTY+0x2e>
     9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <I2C_0_do_I2C_TX_EMPTY+0x34>
     9a4:	0e 94 2d 03 	call	0x65a	; 0x65a <I2C_0_do_I2C_SEND_ADR_READ>
     9a8:	08 95       	ret
     9aa:	0e 94 3f 03 	call	0x67e	; 0x67e <I2C_0_do_I2C_SEND_ADR_WRITE>
     9ae:	08 95       	ret
     9b0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <I2C_0_do_I2C_SEND_STOP>
     9b4:	08 95       	ret
     9b6:	a9 e4       	ldi	r26, 0x49	; 73
     9b8:	b8 e2       	ldi	r27, 0x28	; 40
     9ba:	8c 91       	ld	r24, X
     9bc:	84 60       	ori	r24, 0x04	; 4
     9be:	8c 93       	st	X, r24
     9c0:	1c 96       	adiw	r26, 0x0c	; 12
     9c2:	ed 91       	ld	r30, X+
     9c4:	fc 91       	ld	r31, X
     9c6:	1d 97       	sbiw	r26, 0x0d	; 13
     9c8:	58 96       	adiw	r26, 0x18	; 24
     9ca:	8d 91       	ld	r24, X+
     9cc:	9c 91       	ld	r25, X
     9ce:	59 97       	sbiw	r26, 0x19	; 25
     9d0:	09 95       	icall
     9d2:	83 30       	cpi	r24, 0x03	; 3
     9d4:	39 f0       	breq	.+14     	; 0x9e4 <I2C_0_do_I2C_TX_EMPTY+0x68>
     9d6:	84 30       	cpi	r24, 0x04	; 4
     9d8:	41 f0       	breq	.+16     	; 0x9ea <I2C_0_do_I2C_TX_EMPTY+0x6e>
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	49 f4       	brne	.+18     	; 0x9f0 <I2C_0_do_I2C_TX_EMPTY+0x74>
     9de:	0e 94 2d 03 	call	0x65a	; 0x65a <I2C_0_do_I2C_SEND_ADR_READ>
     9e2:	08 95       	ret
     9e4:	0e 94 3f 03 	call	0x67e	; 0x67e <I2C_0_do_I2C_SEND_ADR_WRITE>
     9e8:	08 95       	ret
     9ea:	0e 94 88 04 	call	0x910	; 0x910 <I2C_0_do_I2C_TX>
     9ee:	08 95       	ret
     9f0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <I2C_0_do_I2C_SEND_STOP>
     9f4:	08 95       	ret

000009f6 <I2C_0_set_data_complete_callback>:
     9f6:	ab 01       	movw	r20, r22
     9f8:	bc 01       	movw	r22, r24
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0e 94 a7 03 	call	0x74e	; 0x74e <I2C_0_set_callback>
     a00:	08 95       	ret

00000a02 <I2C_0_set_address_nack_callback>:
     a02:	ab 01       	movw	r20, r22
     a04:	bc 01       	movw	r22, r24
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	0e 94 a7 03 	call	0x74e	; 0x74e <I2C_0_set_callback>
     a0c:	08 95       	ret

00000a0e <I2C_0_init>:
     a0e:	e0 ea       	ldi	r30, 0xA0	; 160
     a10:	f8 e0       	ldi	r31, 0x08	; 8
     a12:	8d e2       	ldi	r24, 0x2D	; 45
     a14:	86 83       	std	Z+6, r24	; 0x06
     a16:	81 ec       	ldi	r24, 0xC1	; 193
     a18:	83 83       	std	Z+3, r24	; 0x03
     a1a:	08 95       	ret

00000a1c <I2C_0_open>:
     a1c:	90 91 49 28 	lds	r25, 0x2849	; 0x802849 <I2C_0_status>
     a20:	91 fd       	sbrc	r25, 1
     a22:	36 c0       	rjmp	.+108    	; 0xa90 <I2C_0_open+0x74>
     a24:	e9 e4       	ldi	r30, 0x49	; 73
     a26:	f8 e2       	ldi	r31, 0x28	; 40
     a28:	81 83       	std	Z+1, r24	; 0x01
     a2a:	89 2f       	mov	r24, r25
     a2c:	84 7f       	andi	r24, 0xF4	; 244
     a2e:	9e e0       	ldi	r25, 0x0E	; 14
     a30:	92 87       	std	Z+10, r25	; 0x0a
     a32:	24 ef       	ldi	r18, 0xF4	; 244
     a34:	31 e0       	ldi	r19, 0x01	; 1
     a36:	20 87       	std	Z+8, r18	; 0x08
     a38:	31 87       	std	Z+9, r19	; 0x09
     a3a:	82 60       	ori	r24, 0x02	; 2
     a3c:	84 60       	ori	r24, 0x04	; 4
     a3e:	80 83       	st	Z, r24
     a40:	83 ea       	ldi	r24, 0xA3	; 163
     a42:	93 e0       	ldi	r25, 0x03	; 3
     a44:	84 87       	std	Z+12, r24	; 0x0c
     a46:	95 87       	std	Z+13, r25	; 0x0d
     a48:	10 8e       	std	Z+24, r1	; 0x18
     a4a:	11 8e       	std	Z+25, r1	; 0x19
     a4c:	86 87       	std	Z+14, r24	; 0x0e
     a4e:	97 87       	std	Z+15, r25	; 0x0f
     a50:	12 8e       	std	Z+26, r1	; 0x1a
     a52:	13 8e       	std	Z+27, r1	; 0x1b
     a54:	80 8b       	std	Z+16, r24	; 0x10
     a56:	91 8b       	std	Z+17, r25	; 0x11
     a58:	14 8e       	std	Z+28, r1	; 0x1c
     a5a:	15 8e       	std	Z+29, r1	; 0x1d
     a5c:	82 8b       	std	Z+18, r24	; 0x12
     a5e:	93 8b       	std	Z+19, r25	; 0x13
     a60:	16 8e       	std	Z+30, r1	; 0x1e
     a62:	17 8e       	std	Z+31, r1	; 0x1f
     a64:	85 ea       	ldi	r24, 0xA5	; 165
     a66:	93 e0       	ldi	r25, 0x03	; 3
     a68:	84 8b       	std	Z+20, r24	; 0x14
     a6a:	95 8b       	std	Z+21, r25	; 0x15
     a6c:	10 a2       	std	Z+32, r1	; 0x20
     a6e:	11 a2       	std	Z+33, r1	; 0x21
     a70:	e0 ea       	ldi	r30, 0xA0	; 160
     a72:	f8 e0       	ldi	r31, 0x08	; 8
     a74:	84 81       	ldd	r24, Z+4	; 0x04
     a76:	88 60       	ori	r24, 0x08	; 8
     a78:	84 83       	std	Z+4, r24	; 0x04
     a7a:	85 81       	ldd	r24, Z+5	; 0x05
     a7c:	81 60       	ori	r24, 0x01	; 1
     a7e:	85 83       	std	Z+5, r24	; 0x05
     a80:	85 81       	ldd	r24, Z+5	; 0x05
     a82:	80 6c       	ori	r24, 0xC0	; 192
     a84:	85 83       	std	Z+5, r24	; 0x05
     a86:	83 81       	ldd	r24, Z+3	; 0x03
     a88:	80 6c       	ori	r24, 0xC0	; 192
     a8a:	83 83       	std	Z+3, r24	; 0x03
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 95       	ret
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	08 95       	ret

00000a94 <I2C_0_close>:
     a94:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
     a98:	82 ff       	sbrs	r24, 2
     a9a:	07 c0       	rjmp	.+14     	; 0xaaa <I2C_0_close+0x16>
     a9c:	e9 e4       	ldi	r30, 0x49	; 73
     a9e:	f8 e2       	ldi	r31, 0x28	; 40
     aa0:	80 81       	ld	r24, Z
     aa2:	8e 7f       	andi	r24, 0xFE	; 254
     aa4:	80 83       	st	Z, r24
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	83 87       	std	Z+11, r24	; 0x0b
     aaa:	80 91 49 28 	lds	r24, 0x2849	; 0x802849 <I2C_0_status>
     aae:	80 fd       	sbrc	r24, 0
     ab0:	17 c0       	rjmp	.+46     	; 0xae0 <I2C_0_close+0x4c>
     ab2:	e9 e4       	ldi	r30, 0x49	; 73
     ab4:	f8 e2       	ldi	r31, 0x28	; 40
     ab6:	8d 7f       	andi	r24, 0xFD	; 253
     ab8:	80 83       	st	Z, r24
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	81 83       	std	Z+1, r24	; 0x01
     abe:	a0 ea       	ldi	r26, 0xA0	; 160
     ac0:	b8 e0       	ldi	r27, 0x08	; 8
     ac2:	15 96       	adiw	r26, 0x05	; 5
     ac4:	8c 91       	ld	r24, X
     ac6:	15 97       	sbiw	r26, 0x05	; 5
     ac8:	80 6c       	ori	r24, 0xC0	; 192
     aca:	15 96       	adiw	r26, 0x05	; 5
     acc:	8c 93       	st	X, r24
     ace:	15 97       	sbiw	r26, 0x05	; 5
     ad0:	13 96       	adiw	r26, 0x03	; 3
     ad2:	8c 91       	ld	r24, X
     ad4:	13 97       	sbiw	r26, 0x03	; 3
     ad6:	8f 73       	andi	r24, 0x3F	; 63
     ad8:	13 96       	adiw	r26, 0x03	; 3
     ada:	8c 93       	st	X, r24
     adc:	83 85       	ldd	r24, Z+11	; 0x0b
     ade:	08 95       	ret
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	08 95       	ret

00000ae4 <I2C_0_set_buffer>:
     ae4:	9c 01       	movw	r18, r24
     ae6:	90 91 49 28 	lds	r25, 0x2849	; 0x802849 <I2C_0_status>
     aea:	92 ff       	sbrs	r25, 2
     aec:	09 c0       	rjmp	.+18     	; 0xb00 <I2C_0_set_buffer+0x1c>
     aee:	e9 e4       	ldi	r30, 0x49	; 73
     af0:	f8 e2       	ldi	r31, 0x28	; 40
     af2:	22 83       	std	Z+2, r18	; 0x02
     af4:	33 83       	std	Z+3, r19	; 0x03
     af6:	64 83       	std	Z+4, r22	; 0x04
     af8:	75 83       	std	Z+5, r23	; 0x05
     afa:	89 2f       	mov	r24, r25
     afc:	8b 7f       	andi	r24, 0xFB	; 251
     afe:	80 83       	st	Z, r24
     b00:	08 95       	ret

00000b02 <I2C_0_master_operation>:
     b02:	90 91 49 28 	lds	r25, 0x2849	; 0x802849 <I2C_0_status>
     b06:	90 fd       	sbrc	r25, 0
     b08:	11 c0       	rjmp	.+34     	; 0xb2c <I2C_0_master_operation+0x2a>
     b0a:	e9 e4       	ldi	r30, 0x49	; 73
     b0c:	f8 e2       	ldi	r31, 0x28	; 40
     b0e:	91 60       	ori	r25, 0x01	; 1
     b10:	90 83       	st	Z, r25
     b12:	88 23       	and	r24, r24
     b14:	21 f0       	breq	.+8      	; 0xb1e <I2C_0_master_operation+0x1c>
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <I2C_0_status+0xa>
     b1c:	03 c0       	rjmp	.+6      	; 0xb24 <I2C_0_master_operation+0x22>
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <I2C_0_status+0xa>
     b24:	0e 94 73 03 	call	0x6e6	; 0x6e6 <I2C_0_master_isr>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	08 95       	ret
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	08 95       	ret

00000b30 <I2C_0_master_write>:
/**
 * \brief Identical to I2C_0_master_operation(false);
 */
i2c_error_t I2C_0_master_write(void)
{
	return I2C_0_master_operation(false);
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 81 05 	call	0xb02	; 0xb02 <I2C_0_master_operation>
}
     b36:	08 95       	ret

00000b38 <__vector_15>:
    I2C_0_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    I2C_0_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
     b38:	1f 92       	push	r1
     b3a:	0f 92       	push	r0
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	0f 92       	push	r0
     b40:	11 24       	eor	r1, r1
     b42:	2f 93       	push	r18
     b44:	3f 93       	push	r19
     b46:	4f 93       	push	r20
     b48:	5f 93       	push	r21
     b4a:	6f 93       	push	r22
     b4c:	7f 93       	push	r23
     b4e:	8f 93       	push	r24
     b50:	9f 93       	push	r25
     b52:	af 93       	push	r26
     b54:	bf 93       	push	r27
     b56:	ef 93       	push	r30
     b58:	ff 93       	push	r31
	I2C_0_master_isr();
     b5a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <I2C_0_master_isr>
}
     b5e:	ff 91       	pop	r31
     b60:	ef 91       	pop	r30
     b62:	bf 91       	pop	r27
     b64:	af 91       	pop	r26
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	7f 91       	pop	r23
     b6c:	6f 91       	pop	r22
     b6e:	5f 91       	pop	r21
     b70:	4f 91       	pop	r20
     b72:	3f 91       	pop	r19
     b74:	2f 91       	pop	r18
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti

00000b80 <I2C_0_rd2RegCompleteHandler>:
		if (e == I2C_NOERR)
			break;
	}

	return d2;
}
     b80:	62 e0       	ldi	r22, 0x02	; 2
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	0e 94 72 05 	call	0xae4	; 0xae4 <I2C_0_set_buffer>
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <I2C_0_set_data_complete_callback>
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	08 95       	ret

00000b98 <I2C_0_read2ByteRegister>:
	I2C_0_set_data_complete_callback(NULL, NULL);
	return i2c_restart_read;
}

uint16_t I2C_0_read2ByteRegister(i2c_address_t address, uint8_t reg)
{
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <I2C_0_read2ByteRegister+0x8>
     ba0:	1f 92       	push	r1
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	18 2f       	mov	r17, r24
     ba8:	6b 83       	std	Y+3, r22	; 0x03
	// result is little endian
	uint16_t result;

	while (!I2C_0_open(address))
     baa:	81 2f       	mov	r24, r17
     bac:	0e 94 0e 05 	call	0xa1c	; 0xa1c <I2C_0_open>
     bb0:	88 23       	and	r24, r24
     bb2:	d9 f3       	breq	.-10     	; 0xbaa <I2C_0_read2ByteRegister+0x12>
		; // sit here until we get the bus..
	I2C_0_set_data_complete_callback(I2C_0_rd2RegCompleteHandler, &result);
     bb4:	be 01       	movw	r22, r28
     bb6:	6f 5f       	subi	r22, 0xFF	; 255
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	80 ec       	ldi	r24, 0xC0	; 192
     bbc:	95 e0       	ldi	r25, 0x05	; 5
     bbe:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <I2C_0_set_data_complete_callback>
	I2C_0_set_buffer(&reg, 1);
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	ce 01       	movw	r24, r28
     bc8:	03 96       	adiw	r24, 0x03	; 3
     bca:	0e 94 72 05 	call	0xae4	; 0xae4 <I2C_0_set_buffer>
	I2C_0_set_address_nack_callback(i2c_cb_restart_write, NULL); // NACK polling?
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	95 e0       	ldi	r25, 0x05	; 5
     bd6:	0e 94 01 05 	call	0xa02	; 0xa02 <I2C_0_set_address_nack_callback>
	I2C_0_master_write();
     bda:	0e 94 98 05 	call	0xb30	; 0xb30 <I2C_0_master_write>
	while (I2C_BUSY == I2C_0_close())
     bde:	0e 94 4a 05 	call	0xa94	; 0xa94 <I2C_0_close>
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	e1 f3       	breq	.-8      	; 0xbde <I2C_0_read2ByteRegister+0x46>
		; // sit here until finished.

	return (result << 8 | result >> 8);
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
}
     bea:	98 27       	eor	r25, r24
     bec:	89 27       	eor	r24, r25
     bee:	98 27       	eor	r25, r24
     bf0:	23 96       	adiw	r28, 0x03	; 3
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	08 95       	ret

00000bfe <i2c_cb_restart_write>:
}

i2c_operations_t i2c_cb_restart_write(void *p)
{
	return i2c_restart_write;
}
     bfe:	83 e0       	ldi	r24, 0x03	; 3
     c00:	08 95       	ret

00000c02 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     c02:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     c04:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     c06:	40 83       	st	Z, r20
	ret                             // Return to caller
     c08:	08 95       	ret

00000c0a <RN4871_blockingWait>:
	return ret;
}

void RN4871_blockingWait(uint16_t limit)
{
	for (uint16_t counter = 0; counter < limit; counter++)
     c0a:	00 97       	sbiw	r24, 0x00	; 0
     c0c:	69 f0       	breq	.+26     	; 0xc28 <RN4871_blockingWait+0x1e>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c12:	eb e7       	ldi	r30, 0x7B	; 123
     c14:	f2 e9       	ldi	r31, 0x92	; 146
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	f1 f7       	brne	.-4      	; 0xc16 <RN4871_blockingWait+0xc>
     c1a:	00 c0       	rjmp	.+0      	; 0xc1c <RN4871_blockingWait+0x12>
     c1c:	00 00       	nop
     c1e:	2f 5f       	subi	r18, 0xFF	; 255
     c20:	3f 4f       	sbci	r19, 0xFF	; 255
     c22:	82 17       	cp	r24, r18
     c24:	93 07       	cpc	r25, r19
     c26:	a9 f7       	brne	.-22     	; 0xc12 <RN4871_blockingWait+0x8>
     c28:	08 95       	ret

00000c2a <RN4871_Reset_Module>:
	RN4871_ClearReceivedMessage();
}

void RN4871_Reset_Module(void)
{
	rn4871_ClearResetPin(); // Reset using GPIO
     c2a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <rn4871_ClearResetPin>
	RN4871_blockingWait(1);
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 05 06 	call	0xc0a	; 0xc0a <RN4871_blockingWait>
	rn4871_SetResetPin();
     c36:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <rn4871_SetResetPin>
	RN4871_blockingWait(50);
     c3a:	82 e3       	ldi	r24, 0x32	; 50
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 05 06 	call	0xc0a	; 0xc0a <RN4871_blockingWait>
     c42:	08 95       	ret

00000c44 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	08 95       	ret

00000c48 <TIMER_0_init>:
	// TCA0.SINGLE.DBGCTRL = 0 << TCA_SINGLE_DBGRUN_bp; /* Debug Run: disabled */

	// TCA0.SINGLE.EVCTRL = 0 << TCA_SINGLE_CNTEI_bp /* Count on Event Input: disabled */
	//		 | TCA_SINGLE_EVACT_POSEDGE_gc; /* Count on positive edge event */

	TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp   /* Compare 0 Interrupt: disabled */
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	fa e0       	ldi	r31, 0x0A	; 10
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	82 87       	std	Z+10, r24	; 0x0a
	                      | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	                      | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	                      | 1 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: enabled */

	TCA0.SINGLE.PER = 0xbebc; /* Period: 0xbebc */
     c50:	8c eb       	ldi	r24, 0xBC	; 188
     c52:	9e eb       	ldi	r25, 0xBE	; 190
     c54:	86 a3       	std	Z+38, r24	; 0x26
     c56:	97 a3       	std	Z+39, r25	; 0x27

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc /* System Clock / 1024 */
     c58:	8e e0       	ldi	r24, 0x0E	; 14
     c5a:	80 83       	st	Z, r24
	                    | 0 << TCA_SINGLE_ENABLE_bp; /* Module Enable: disabled */

	return 0;
}
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	08 95       	ret

00000c60 <USART_RN4871_default_rx_isr_cb>:
}

bool USART_TERMINAL_is_tx_busy()
{
	return (!(USART2.STATUS & USART_TXCIF_bm));
}
     c60:	90 91 20 08 	lds	r25, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
     c64:	e0 91 90 28 	lds	r30, 0x2890	; 0x802890 <USART_RN4871_rx_head>
     c68:	ef 5f       	subi	r30, 0xFF	; 255
     c6a:	e7 70       	andi	r30, 0x07	; 7
     c6c:	80 91 8f 28 	lds	r24, 0x288F	; 0x80288f <USART_RN4871_rx_tail>
     c70:	e8 17       	cp	r30, r24
     c72:	59 f0       	breq	.+22     	; 0xc8a <USART_RN4871_default_rx_isr_cb+0x2a>
     c74:	e0 93 90 28 	sts	0x2890, r30	; 0x802890 <USART_RN4871_rx_head>
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	ef 56       	subi	r30, 0x6F	; 111
     c7c:	f7 4d       	sbci	r31, 0xD7	; 215
     c7e:	90 83       	st	Z, r25
     c80:	80 91 8e 28 	lds	r24, 0x288E	; 0x80288e <USART_RN4871_rx_elements>
     c84:	8f 5f       	subi	r24, 0xFF	; 255
     c86:	80 93 8e 28 	sts	0x288E, r24	; 0x80288e <USART_RN4871_rx_elements>
     c8a:	08 95       	ret

00000c8c <USART_RN4871_default_udre_isr_cb>:
     c8c:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <USART_RN4871_tx_elements>
     c90:	88 23       	and	r24, r24
     c92:	89 f0       	breq	.+34     	; 0xcb6 <USART_RN4871_default_udre_isr_cb+0x2a>
     c94:	e0 91 84 28 	lds	r30, 0x2884	; 0x802884 <USART_RN4871_tx_tail>
     c98:	ef 5f       	subi	r30, 0xFF	; 255
     c9a:	e7 70       	andi	r30, 0x07	; 7
     c9c:	e0 93 84 28 	sts	0x2884, r30	; 0x802884 <USART_RN4871_tx_tail>
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	ea 57       	subi	r30, 0x7A	; 122
     ca4:	f7 4d       	sbci	r31, 0xD7	; 215
     ca6:	80 81       	ld	r24, Z
     ca8:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x700822>
     cac:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <USART_RN4871_tx_elements>
     cb0:	81 50       	subi	r24, 0x01	; 1
     cb2:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <USART_RN4871_tx_elements>
     cb6:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <USART_RN4871_tx_elements>
     cba:	81 11       	cpse	r24, r1
     cbc:	05 c0       	rjmp	.+10     	; 0xcc8 <USART_RN4871_default_udre_isr_cb+0x3c>
     cbe:	e0 e2       	ldi	r30, 0x20	; 32
     cc0:	f8 e0       	ldi	r31, 0x08	; 8
     cc2:	85 81       	ldd	r24, Z+5	; 0x05
     cc4:	8f 7d       	andi	r24, 0xDF	; 223
     cc6:	85 83       	std	Z+5, r24	; 0x05
     cc8:	08 95       	ret

00000cca <USART_TERMINAL_default_rx_isr_cb>:
     cca:	90 91 40 08 	lds	r25, 0x0840	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
     cce:	e0 91 7a 28 	lds	r30, 0x287A	; 0x80287a <USART_TERMINAL_rx_head>
     cd2:	ef 5f       	subi	r30, 0xFF	; 255
     cd4:	e7 70       	andi	r30, 0x07	; 7
     cd6:	80 91 79 28 	lds	r24, 0x2879	; 0x802879 <USART_TERMINAL_rx_tail>
     cda:	e8 17       	cp	r30, r24
     cdc:	59 f0       	breq	.+22     	; 0xcf4 <USART_TERMINAL_default_rx_isr_cb+0x2a>
     cde:	e0 93 7a 28 	sts	0x287A, r30	; 0x80287a <USART_TERMINAL_rx_head>
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	e5 58       	subi	r30, 0x85	; 133
     ce6:	f7 4d       	sbci	r31, 0xD7	; 215
     ce8:	90 83       	st	Z, r25
     cea:	80 91 78 28 	lds	r24, 0x2878	; 0x802878 <USART_TERMINAL_rx_elements>
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	80 93 78 28 	sts	0x2878, r24	; 0x802878 <USART_TERMINAL_rx_elements>
     cf4:	08 95       	ret

00000cf6 <USART_TERMINAL_default_udre_isr_cb>:
     cf6:	80 91 6d 28 	lds	r24, 0x286D	; 0x80286d <USART_TERMINAL_tx_elements>
     cfa:	88 23       	and	r24, r24
     cfc:	89 f0       	breq	.+34     	; 0xd20 <USART_TERMINAL_default_udre_isr_cb+0x2a>
     cfe:	e0 91 6e 28 	lds	r30, 0x286E	; 0x80286e <USART_TERMINAL_tx_tail>
     d02:	ef 5f       	subi	r30, 0xFF	; 255
     d04:	e7 70       	andi	r30, 0x07	; 7
     d06:	e0 93 6e 28 	sts	0x286E, r30	; 0x80286e <USART_TERMINAL_tx_tail>
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	e0 59       	subi	r30, 0x90	; 144
     d0e:	f7 4d       	sbci	r31, 0xD7	; 215
     d10:	80 81       	ld	r24, Z
     d12:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__TEXT_REGION_LENGTH__+0x700842>
     d16:	80 91 6d 28 	lds	r24, 0x286D	; 0x80286d <USART_TERMINAL_tx_elements>
     d1a:	81 50       	subi	r24, 0x01	; 1
     d1c:	80 93 6d 28 	sts	0x286D, r24	; 0x80286d <USART_TERMINAL_tx_elements>
     d20:	80 91 6d 28 	lds	r24, 0x286D	; 0x80286d <USART_TERMINAL_tx_elements>
     d24:	81 11       	cpse	r24, r1
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <USART_TERMINAL_default_udre_isr_cb+0x3c>
     d28:	e0 e4       	ldi	r30, 0x40	; 64
     d2a:	f8 e0       	ldi	r31, 0x08	; 8
     d2c:	85 81       	ldd	r24, Z+5	; 0x05
     d2e:	8f 7d       	andi	r24, 0xDF	; 223
     d30:	85 83       	std	Z+5, r24	; 0x05
     d32:	08 95       	ret

00000d34 <USART_RN4871_set_ISR_cb>:
     d34:	61 30       	cpi	r22, 0x01	; 1
     d36:	19 f0       	breq	.+6      	; 0xd3e <USART_RN4871_set_ISR_cb+0xa>
     d38:	62 30       	cpi	r22, 0x02	; 2
     d3a:	31 f0       	breq	.+12     	; 0xd48 <USART_RN4871_set_ISR_cb+0x14>
     d3c:	08 95       	ret
     d3e:	80 93 2a 28 	sts	0x282A, r24	; 0x80282a <USART_RN4871_rx_isr_cb>
     d42:	90 93 2b 28 	sts	0x282B, r25	; 0x80282b <USART_RN4871_rx_isr_cb+0x1>
     d46:	08 95       	ret
     d48:	80 93 28 28 	sts	0x2828, r24	; 0x802828 <USART_RN4871_udre_isr_cb>
     d4c:	90 93 29 28 	sts	0x2829, r25	; 0x802829 <USART_RN4871_udre_isr_cb+0x1>
     d50:	08 95       	ret

00000d52 <__vector_26>:
     d52:	1f 92       	push	r1
     d54:	0f 92       	push	r0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	0f 92       	push	r0
     d5a:	11 24       	eor	r1, r1
     d5c:	2f 93       	push	r18
     d5e:	3f 93       	push	r19
     d60:	4f 93       	push	r20
     d62:	5f 93       	push	r21
     d64:	6f 93       	push	r22
     d66:	7f 93       	push	r23
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	af 93       	push	r26
     d6e:	bf 93       	push	r27
     d70:	ef 93       	push	r30
     d72:	ff 93       	push	r31
     d74:	e0 91 2a 28 	lds	r30, 0x282A	; 0x80282a <USART_RN4871_rx_isr_cb>
     d78:	f0 91 2b 28 	lds	r31, 0x282B	; 0x80282b <USART_RN4871_rx_isr_cb+0x1>
     d7c:	30 97       	sbiw	r30, 0x00	; 0
     d7e:	09 f0       	breq	.+2      	; 0xd82 <__vector_26+0x30>
     d80:	09 95       	icall
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	bf 91       	pop	r27
     d88:	af 91       	pop	r26
     d8a:	9f 91       	pop	r25
     d8c:	8f 91       	pop	r24
     d8e:	7f 91       	pop	r23
     d90:	6f 91       	pop	r22
     d92:	5f 91       	pop	r21
     d94:	4f 91       	pop	r20
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	0f 90       	pop	r0
     da0:	1f 90       	pop	r1
     da2:	18 95       	reti

00000da4 <__vector_27>:
     da4:	1f 92       	push	r1
     da6:	0f 92       	push	r0
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	0f 92       	push	r0
     dac:	11 24       	eor	r1, r1
     dae:	2f 93       	push	r18
     db0:	3f 93       	push	r19
     db2:	4f 93       	push	r20
     db4:	5f 93       	push	r21
     db6:	6f 93       	push	r22
     db8:	7f 93       	push	r23
     dba:	8f 93       	push	r24
     dbc:	9f 93       	push	r25
     dbe:	af 93       	push	r26
     dc0:	bf 93       	push	r27
     dc2:	ef 93       	push	r30
     dc4:	ff 93       	push	r31
     dc6:	e0 91 28 28 	lds	r30, 0x2828	; 0x802828 <USART_RN4871_udre_isr_cb>
     dca:	f0 91 29 28 	lds	r31, 0x2829	; 0x802829 <USART_RN4871_udre_isr_cb+0x1>
     dce:	30 97       	sbiw	r30, 0x00	; 0
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <__vector_27+0x30>
     dd2:	09 95       	icall
     dd4:	ff 91       	pop	r31
     dd6:	ef 91       	pop	r30
     dd8:	bf 91       	pop	r27
     dda:	af 91       	pop	r26
     ddc:	9f 91       	pop	r25
     dde:	8f 91       	pop	r24
     de0:	7f 91       	pop	r23
     de2:	6f 91       	pop	r22
     de4:	5f 91       	pop	r21
     de6:	4f 91       	pop	r20
     de8:	3f 91       	pop	r19
     dea:	2f 91       	pop	r18
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <USART_RN4871_read>:
     df6:	80 91 8e 28 	lds	r24, 0x288E	; 0x80288e <USART_RN4871_rx_elements>
     dfa:	88 23       	and	r24, r24
     dfc:	e1 f3       	breq	.-8      	; 0xdf6 <USART_RN4871_read>
     dfe:	e0 91 8f 28 	lds	r30, 0x288F	; 0x80288f <USART_RN4871_rx_tail>
     e02:	ef 5f       	subi	r30, 0xFF	; 255
     e04:	e7 70       	andi	r30, 0x07	; 7
     e06:	e0 93 8f 28 	sts	0x288F, r30	; 0x80288f <USART_RN4871_rx_tail>
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	0f 92       	push	r0
     e10:	80 91 8e 28 	lds	r24, 0x288E	; 0x80288e <USART_RN4871_rx_elements>
     e14:	81 50       	subi	r24, 0x01	; 1
     e16:	80 93 8e 28 	sts	0x288E, r24	; 0x80288e <USART_RN4871_rx_elements>
     e1a:	0f 90       	pop	r0
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	ef 56       	subi	r30, 0x6F	; 111
     e22:	f7 4d       	sbci	r31, 0xD7	; 215
     e24:	80 81       	ld	r24, Z
     e26:	08 95       	ret

00000e28 <USART_RN4871_write>:
     e28:	20 91 85 28 	lds	r18, 0x2885	; 0x802885 <USART_RN4871_tx_head>
     e2c:	2f 5f       	subi	r18, 0xFF	; 255
     e2e:	27 70       	andi	r18, 0x07	; 7
     e30:	90 91 83 28 	lds	r25, 0x2883	; 0x802883 <USART_RN4871_tx_elements>
     e34:	98 30       	cpi	r25, 0x08	; 8
     e36:	e1 f3       	breq	.-8      	; 0xe30 <USART_RN4871_write+0x8>
     e38:	e2 2f       	mov	r30, r18
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	ea 57       	subi	r30, 0x7A	; 122
     e3e:	f7 4d       	sbci	r31, 0xD7	; 215
     e40:	80 83       	st	Z, r24
     e42:	20 93 85 28 	sts	0x2885, r18	; 0x802885 <USART_RN4871_tx_head>
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	0f 92       	push	r0
     e4c:	80 91 83 28 	lds	r24, 0x2883	; 0x802883 <USART_RN4871_tx_elements>
     e50:	8f 5f       	subi	r24, 0xFF	; 255
     e52:	80 93 83 28 	sts	0x2883, r24	; 0x802883 <USART_RN4871_tx_elements>
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	e0 e2       	ldi	r30, 0x20	; 32
     e5c:	f8 e0       	ldi	r31, 0x08	; 8
     e5e:	85 81       	ldd	r24, Z+5	; 0x05
     e60:	80 62       	ori	r24, 0x20	; 32
     e62:	85 83       	std	Z+5, r24	; 0x05
     e64:	08 95       	ret

00000e66 <USART_RN4871_printCHAR>:
     e66:	0e 94 14 07 	call	0xe28	; 0xe28 <USART_RN4871_write>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	08 95       	ret

00000e70 <USART_RN4871_init>:
     e70:	e0 e2       	ldi	r30, 0x20	; 32
     e72:	f8 e0       	ldi	r31, 0x08	; 8
     e74:	8b e5       	ldi	r24, 0x5B	; 91
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	80 87       	std	Z+8, r24	; 0x08
     e7a:	91 87       	std	Z+9, r25	; 0x09
     e7c:	80 e8       	ldi	r24, 0x80	; 128
     e7e:	85 83       	std	Z+5, r24	; 0x05
     e80:	80 ec       	ldi	r24, 0xC0	; 192
     e82:	86 83       	std	Z+6, r24	; 0x06
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	83 87       	std	Z+11, r24	; 0x0b
     e88:	10 92 8f 28 	sts	0x288F, r1	; 0x80288f <USART_RN4871_rx_tail>
     e8c:	10 92 90 28 	sts	0x2890, r1	; 0x802890 <USART_RN4871_rx_head>
     e90:	10 92 8e 28 	sts	0x288E, r1	; 0x80288e <USART_RN4871_rx_elements>
     e94:	10 92 84 28 	sts	0x2884, r1	; 0x802884 <USART_RN4871_tx_tail>
     e98:	10 92 85 28 	sts	0x2885, r1	; 0x802885 <USART_RN4871_tx_head>
     e9c:	10 92 83 28 	sts	0x2883, r1	; 0x802883 <USART_RN4871_tx_elements>
     ea0:	8c e2       	ldi	r24, 0x2C	; 44
     ea2:	98 e2       	ldi	r25, 0x28	; 40
     ea4:	80 93 a6 28 	sts	0x28A6, r24	; 0x8028a6 <__iob+0x2>
     ea8:	90 93 a7 28 	sts	0x28A7, r25	; 0x8028a7 <__iob+0x3>
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	08 95       	ret

00000eb0 <USART_TERMINAL_set_ISR_cb>:
     eb0:	61 30       	cpi	r22, 0x01	; 1
     eb2:	19 f0       	breq	.+6      	; 0xeba <USART_TERMINAL_set_ISR_cb+0xa>
     eb4:	62 30       	cpi	r22, 0x02	; 2
     eb6:	31 f0       	breq	.+12     	; 0xec4 <USART_TERMINAL_set_ISR_cb+0x14>
     eb8:	08 95       	ret
     eba:	80 93 26 28 	sts	0x2826, r24	; 0x802826 <USART_TERMINAL_rx_isr_cb>
     ebe:	90 93 27 28 	sts	0x2827, r25	; 0x802827 <USART_TERMINAL_rx_isr_cb+0x1>
     ec2:	08 95       	ret
     ec4:	80 93 24 28 	sts	0x2824, r24	; 0x802824 <USART_TERMINAL_udre_isr_cb>
     ec8:	90 93 25 28 	sts	0x2825, r25	; 0x802825 <USART_TERMINAL_udre_isr_cb+0x1>
     ecc:	08 95       	ret

00000ece <__vector_31>:
     ece:	1f 92       	push	r1
     ed0:	0f 92       	push	r0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	0f 92       	push	r0
     ed6:	11 24       	eor	r1, r1
     ed8:	2f 93       	push	r18
     eda:	3f 93       	push	r19
     edc:	4f 93       	push	r20
     ede:	5f 93       	push	r21
     ee0:	6f 93       	push	r22
     ee2:	7f 93       	push	r23
     ee4:	8f 93       	push	r24
     ee6:	9f 93       	push	r25
     ee8:	af 93       	push	r26
     eea:	bf 93       	push	r27
     eec:	ef 93       	push	r30
     eee:	ff 93       	push	r31
     ef0:	e0 91 26 28 	lds	r30, 0x2826	; 0x802826 <USART_TERMINAL_rx_isr_cb>
     ef4:	f0 91 27 28 	lds	r31, 0x2827	; 0x802827 <USART_TERMINAL_rx_isr_cb+0x1>
     ef8:	30 97       	sbiw	r30, 0x00	; 0
     efa:	09 f0       	breq	.+2      	; 0xefe <__vector_31+0x30>
     efc:	09 95       	icall
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	0f 90       	pop	r0
     f1c:	1f 90       	pop	r1
     f1e:	18 95       	reti

00000f20 <__vector_32>:
     f20:	1f 92       	push	r1
     f22:	0f 92       	push	r0
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	0f 92       	push	r0
     f28:	11 24       	eor	r1, r1
     f2a:	2f 93       	push	r18
     f2c:	3f 93       	push	r19
     f2e:	4f 93       	push	r20
     f30:	5f 93       	push	r21
     f32:	6f 93       	push	r22
     f34:	7f 93       	push	r23
     f36:	8f 93       	push	r24
     f38:	9f 93       	push	r25
     f3a:	af 93       	push	r26
     f3c:	bf 93       	push	r27
     f3e:	ef 93       	push	r30
     f40:	ff 93       	push	r31
     f42:	e0 91 24 28 	lds	r30, 0x2824	; 0x802824 <USART_TERMINAL_udre_isr_cb>
     f46:	f0 91 25 28 	lds	r31, 0x2825	; 0x802825 <USART_TERMINAL_udre_isr_cb+0x1>
     f4a:	30 97       	sbiw	r30, 0x00	; 0
     f4c:	09 f0       	breq	.+2      	; 0xf50 <__vector_32+0x30>
     f4e:	09 95       	icall
     f50:	ff 91       	pop	r31
     f52:	ef 91       	pop	r30
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	9f 91       	pop	r25
     f5a:	8f 91       	pop	r24
     f5c:	7f 91       	pop	r23
     f5e:	6f 91       	pop	r22
     f60:	5f 91       	pop	r21
     f62:	4f 91       	pop	r20
     f64:	3f 91       	pop	r19
     f66:	2f 91       	pop	r18
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti

00000f72 <USART_TERMINAL_read>:
uint8_t USART_TERMINAL_read(void)
{
	uint8_t tmptail;

	/* Wait for incoming data */
	while (USART_TERMINAL_rx_elements == 0)
     f72:	80 91 78 28 	lds	r24, 0x2878	; 0x802878 <USART_TERMINAL_rx_elements>
     f76:	88 23       	and	r24, r24
     f78:	e1 f3       	breq	.-8      	; 0xf72 <USART_TERMINAL_read>
		;
	/* Calculate buffer index */
	tmptail = (USART_TERMINAL_rx_tail + 1) & USART_TERMINAL_RX_BUFFER_MASK;
     f7a:	e0 91 79 28 	lds	r30, 0x2879	; 0x802879 <USART_TERMINAL_rx_tail>
     f7e:	ef 5f       	subi	r30, 0xFF	; 255
     f80:	e7 70       	andi	r30, 0x07	; 7
	/* Store new index */
	USART_TERMINAL_rx_tail = tmptail;
     f82:	e0 93 79 28 	sts	0x2879, r30	; 0x802879 <USART_TERMINAL_rx_tail>
	ENTER_CRITICAL(R);
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	0f 92       	push	r0
	USART_TERMINAL_rx_elements--;
     f8c:	80 91 78 28 	lds	r24, 0x2878	; 0x802878 <USART_TERMINAL_rx_elements>
     f90:	81 50       	subi	r24, 0x01	; 1
     f92:	80 93 78 28 	sts	0x2878, r24	; 0x802878 <USART_TERMINAL_rx_elements>
	EXIT_CRITICAL(R);
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63

	/* Return data */
	return USART_TERMINAL_rxbuf[tmptail];
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	e5 58       	subi	r30, 0x85	; 133
     f9e:	f7 4d       	sbci	r31, 0xD7	; 215
}
     fa0:	80 81       	ld	r24, Z
     fa2:	08 95       	ret

00000fa4 <USART_TERMINAL_write>:
void USART_TERMINAL_write(const uint8_t data)
{
	uint8_t tmphead;

	/* Calculate buffer index */
	tmphead = (USART_TERMINAL_tx_head + 1) & USART_TERMINAL_TX_BUFFER_MASK;
     fa4:	20 91 6f 28 	lds	r18, 0x286F	; 0x80286f <USART_TERMINAL_tx_head>
     fa8:	2f 5f       	subi	r18, 0xFF	; 255
     faa:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (USART_TERMINAL_tx_elements == USART_TERMINAL_TX_BUFFER_SIZE)
     fac:	90 91 6d 28 	lds	r25, 0x286D	; 0x80286d <USART_TERMINAL_tx_elements>
     fb0:	98 30       	cpi	r25, 0x08	; 8
     fb2:	e1 f3       	breq	.-8      	; 0xfac <USART_TERMINAL_write+0x8>
		;
	/* Store data in buffer */
	USART_TERMINAL_txbuf[tmphead] = data;
     fb4:	e2 2f       	mov	r30, r18
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	e0 59       	subi	r30, 0x90	; 144
     fba:	f7 4d       	sbci	r31, 0xD7	; 215
     fbc:	80 83       	st	Z, r24
	/* Store new index */
	USART_TERMINAL_tx_head = tmphead;
     fbe:	20 93 6f 28 	sts	0x286F, r18	; 0x80286f <USART_TERMINAL_tx_head>
	ENTER_CRITICAL(W);
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	0f 92       	push	r0
	USART_TERMINAL_tx_elements++;
     fc8:	80 91 6d 28 	lds	r24, 0x286D	; 0x80286d <USART_TERMINAL_tx_elements>
     fcc:	8f 5f       	subi	r24, 0xFF	; 255
     fce:	80 93 6d 28 	sts	0x286D, r24	; 0x80286d <USART_TERMINAL_tx_elements>
	EXIT_CRITICAL(W);
     fd2:	0f 90       	pop	r0
     fd4:	0f be       	out	0x3f, r0	; 63
	/* Enable UDRE interrupt */
	USART2.CTRLA |= (1 << USART_DREIE_bp);
     fd6:	e0 e4       	ldi	r30, 0x40	; 64
     fd8:	f8 e0       	ldi	r31, 0x08	; 8
     fda:	85 81       	ldd	r24, Z+5	; 0x05
     fdc:	80 62       	ori	r24, 0x20	; 32
     fde:	85 83       	std	Z+5, r24	; 0x05
     fe0:	08 95       	ret

00000fe2 <USART_TERMINAL_init>:
 * \retval 1 the USART init was not successful
 */
int8_t USART_TERMINAL_init()
{

	USART2.BAUD = (uint16_t)USART2_BAUD_RATE(115200); /* set baud rate register */
     fe2:	e0 e4       	ldi	r30, 0x40	; 64
     fe4:	f8 e0       	ldi	r31, 0x08	; 8
     fe6:	8b e5       	ldi	r24, 0x5B	; 91
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	80 87       	std	Z+8, r24	; 0x08
     fec:	91 87       	std	Z+9, r25	; 0x09

	USART2.CTRLA = 0 << USART_ABEIE_bp    /* Auto-baud Error Interrupt Enable: disabled */
     fee:	80 e8       	ldi	r24, 0x80	; 128
     ff0:	85 83       	std	Z+5, r24	; 0x05
	               | USART_RS485_OFF_gc   /* RS485 Mode disabled */
	               | 1 << USART_RXCIE_bp  /* Receive Complete Interrupt Enable: enabled */
	               | 0 << USART_RXSIE_bp  /* Receiver Start Frame Interrupt Enable: disabled */
	               | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */

	USART2.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
     ff2:	80 ec       	ldi	r24, 0xC0	; 192
     ff4:	86 83       	std	Z+6, r24	; 0x06
	uint8_t x;

	/* Initialize ringbuffers */
	x = 0;

	USART_TERMINAL_rx_tail     = x;
     ff6:	10 92 79 28 	sts	0x2879, r1	; 0x802879 <USART_TERMINAL_rx_tail>
	USART_TERMINAL_rx_head     = x;
     ffa:	10 92 7a 28 	sts	0x287A, r1	; 0x80287a <USART_TERMINAL_rx_head>
	USART_TERMINAL_rx_elements = x;
     ffe:	10 92 78 28 	sts	0x2878, r1	; 0x802878 <USART_TERMINAL_rx_elements>
	USART_TERMINAL_tx_tail     = x;
    1002:	10 92 6e 28 	sts	0x286E, r1	; 0x80286e <USART_TERMINAL_tx_tail>
	USART_TERMINAL_tx_head     = x;
    1006:	10 92 6f 28 	sts	0x286F, r1	; 0x80286f <USART_TERMINAL_tx_head>
	USART_TERMINAL_tx_elements = x;
    100a:	10 92 6d 28 	sts	0x286D, r1	; 0x80286d <USART_TERMINAL_tx_elements>

	return 0;
}
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	08 95       	ret

00001012 <__divmodhi4>:
    1012:	97 fb       	bst	r25, 7
    1014:	07 2e       	mov	r0, r23
    1016:	16 f4       	brtc	.+4      	; 0x101c <__divmodhi4+0xa>
    1018:	00 94       	com	r0
    101a:	07 d0       	rcall	.+14     	; 0x102a <__divmodhi4_neg1>
    101c:	77 fd       	sbrc	r23, 7
    101e:	09 d0       	rcall	.+18     	; 0x1032 <__divmodhi4_neg2>
    1020:	0e 94 28 08 	call	0x1050	; 0x1050 <__udivmodhi4>
    1024:	07 fc       	sbrc	r0, 7
    1026:	05 d0       	rcall	.+10     	; 0x1032 <__divmodhi4_neg2>
    1028:	3e f4       	brtc	.+14     	; 0x1038 <__divmodhi4_exit>

0000102a <__divmodhi4_neg1>:
    102a:	90 95       	com	r25
    102c:	81 95       	neg	r24
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	08 95       	ret

00001032 <__divmodhi4_neg2>:
    1032:	70 95       	com	r23
    1034:	61 95       	neg	r22
    1036:	7f 4f       	sbci	r23, 0xFF	; 255

00001038 <__divmodhi4_exit>:
    1038:	08 95       	ret

0000103a <__muluhisi3>:
    103a:	0e 94 3c 08 	call	0x1078	; 0x1078 <__umulhisi3>
    103e:	a5 9f       	mul	r26, r21
    1040:	90 0d       	add	r25, r0
    1042:	b4 9f       	mul	r27, r20
    1044:	90 0d       	add	r25, r0
    1046:	a4 9f       	mul	r26, r20
    1048:	80 0d       	add	r24, r0
    104a:	91 1d       	adc	r25, r1
    104c:	11 24       	eor	r1, r1
    104e:	08 95       	ret

00001050 <__udivmodhi4>:
    1050:	aa 1b       	sub	r26, r26
    1052:	bb 1b       	sub	r27, r27
    1054:	51 e1       	ldi	r21, 0x11	; 17
    1056:	07 c0       	rjmp	.+14     	; 0x1066 <__udivmodhi4_ep>

00001058 <__udivmodhi4_loop>:
    1058:	aa 1f       	adc	r26, r26
    105a:	bb 1f       	adc	r27, r27
    105c:	a6 17       	cp	r26, r22
    105e:	b7 07       	cpc	r27, r23
    1060:	10 f0       	brcs	.+4      	; 0x1066 <__udivmodhi4_ep>
    1062:	a6 1b       	sub	r26, r22
    1064:	b7 0b       	sbc	r27, r23

00001066 <__udivmodhi4_ep>:
    1066:	88 1f       	adc	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	5a 95       	dec	r21
    106c:	a9 f7       	brne	.-22     	; 0x1058 <__udivmodhi4_loop>
    106e:	80 95       	com	r24
    1070:	90 95       	com	r25
    1072:	bc 01       	movw	r22, r24
    1074:	cd 01       	movw	r24, r26
    1076:	08 95       	ret

00001078 <__umulhisi3>:
    1078:	a2 9f       	mul	r26, r18
    107a:	b0 01       	movw	r22, r0
    107c:	b3 9f       	mul	r27, r19
    107e:	c0 01       	movw	r24, r0
    1080:	a3 9f       	mul	r26, r19
    1082:	70 0d       	add	r23, r0
    1084:	81 1d       	adc	r24, r1
    1086:	11 24       	eor	r1, r1
    1088:	91 1d       	adc	r25, r1
    108a:	b2 9f       	mul	r27, r18
    108c:	70 0d       	add	r23, r0
    108e:	81 1d       	adc	r24, r1
    1090:	11 24       	eor	r1, r1
    1092:	91 1d       	adc	r25, r1
    1094:	08 95       	ret

00001096 <sprintf>:
    1096:	ae e0       	ldi	r26, 0x0E	; 14
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e1 e5       	ldi	r30, 0x51	; 81
    109c:	f8 e0       	ldi	r31, 0x08	; 8
    109e:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <__prologue_saves__+0x1c>
    10a2:	0d 89       	ldd	r16, Y+21	; 0x15
    10a4:	1e 89       	ldd	r17, Y+22	; 0x16
    10a6:	86 e0       	ldi	r24, 0x06	; 6
    10a8:	8c 83       	std	Y+4, r24	; 0x04
    10aa:	09 83       	std	Y+1, r16	; 0x01
    10ac:	1a 83       	std	Y+2, r17	; 0x02
    10ae:	8f ef       	ldi	r24, 0xFF	; 255
    10b0:	9f e7       	ldi	r25, 0x7F	; 127
    10b2:	8d 83       	std	Y+5, r24	; 0x05
    10b4:	9e 83       	std	Y+6, r25	; 0x06
    10b6:	ae 01       	movw	r20, r28
    10b8:	47 5e       	subi	r20, 0xE7	; 231
    10ba:	5f 4f       	sbci	r21, 0xFF	; 255
    10bc:	6f 89       	ldd	r22, Y+23	; 0x17
    10be:	78 8d       	ldd	r23, Y+24	; 0x18
    10c0:	ce 01       	movw	r24, r28
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	0e 94 6d 08 	call	0x10da	; 0x10da <vfprintf>
    10c8:	ef 81       	ldd	r30, Y+7	; 0x07
    10ca:	f8 85       	ldd	r31, Y+8	; 0x08
    10cc:	e0 0f       	add	r30, r16
    10ce:	f1 1f       	adc	r31, r17
    10d0:	10 82       	st	Z, r1
    10d2:	2e 96       	adiw	r28, 0x0e	; 14
    10d4:	e4 e0       	ldi	r30, 0x04	; 4
    10d6:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__epilogue_restores__+0x1c>

000010da <vfprintf>:
    10da:	ab e0       	ldi	r26, 0x0B	; 11
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e3 e7       	ldi	r30, 0x73	; 115
    10e0:	f8 e0       	ldi	r31, 0x08	; 8
    10e2:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__prologue_saves__>
    10e6:	6c 01       	movw	r12, r24
    10e8:	7b 01       	movw	r14, r22
    10ea:	8a 01       	movw	r16, r20
    10ec:	fc 01       	movw	r30, r24
    10ee:	16 82       	std	Z+6, r1	; 0x06
    10f0:	17 82       	std	Z+7, r1	; 0x07
    10f2:	83 81       	ldd	r24, Z+3	; 0x03
    10f4:	81 ff       	sbrs	r24, 1
    10f6:	cc c1       	rjmp	.+920    	; 0x1490 <vfprintf+0x3b6>
    10f8:	ce 01       	movw	r24, r28
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	3c 01       	movw	r6, r24
    10fe:	f6 01       	movw	r30, r12
    1100:	93 81       	ldd	r25, Z+3	; 0x03
    1102:	f7 01       	movw	r30, r14
    1104:	93 fd       	sbrc	r25, 3
    1106:	85 91       	lpm	r24, Z+
    1108:	93 ff       	sbrs	r25, 3
    110a:	81 91       	ld	r24, Z+
    110c:	7f 01       	movw	r14, r30
    110e:	88 23       	and	r24, r24
    1110:	09 f4       	brne	.+2      	; 0x1114 <vfprintf+0x3a>
    1112:	ba c1       	rjmp	.+884    	; 0x1488 <vfprintf+0x3ae>
    1114:	85 32       	cpi	r24, 0x25	; 37
    1116:	39 f4       	brne	.+14     	; 0x1126 <vfprintf+0x4c>
    1118:	93 fd       	sbrc	r25, 3
    111a:	85 91       	lpm	r24, Z+
    111c:	93 ff       	sbrs	r25, 3
    111e:	81 91       	ld	r24, Z+
    1120:	7f 01       	movw	r14, r30
    1122:	85 32       	cpi	r24, 0x25	; 37
    1124:	29 f4       	brne	.+10     	; 0x1130 <vfprintf+0x56>
    1126:	b6 01       	movw	r22, r12
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <fputc>
    112e:	e7 cf       	rjmp	.-50     	; 0x10fe <vfprintf+0x24>
    1130:	91 2c       	mov	r9, r1
    1132:	21 2c       	mov	r2, r1
    1134:	31 2c       	mov	r3, r1
    1136:	ff e1       	ldi	r31, 0x1F	; 31
    1138:	f3 15       	cp	r31, r3
    113a:	d8 f0       	brcs	.+54     	; 0x1172 <vfprintf+0x98>
    113c:	8b 32       	cpi	r24, 0x2B	; 43
    113e:	79 f0       	breq	.+30     	; 0x115e <vfprintf+0x84>
    1140:	38 f4       	brcc	.+14     	; 0x1150 <vfprintf+0x76>
    1142:	80 32       	cpi	r24, 0x20	; 32
    1144:	79 f0       	breq	.+30     	; 0x1164 <vfprintf+0x8a>
    1146:	83 32       	cpi	r24, 0x23	; 35
    1148:	a1 f4       	brne	.+40     	; 0x1172 <vfprintf+0x98>
    114a:	23 2d       	mov	r18, r3
    114c:	20 61       	ori	r18, 0x10	; 16
    114e:	1d c0       	rjmp	.+58     	; 0x118a <vfprintf+0xb0>
    1150:	8d 32       	cpi	r24, 0x2D	; 45
    1152:	61 f0       	breq	.+24     	; 0x116c <vfprintf+0x92>
    1154:	80 33       	cpi	r24, 0x30	; 48
    1156:	69 f4       	brne	.+26     	; 0x1172 <vfprintf+0x98>
    1158:	23 2d       	mov	r18, r3
    115a:	21 60       	ori	r18, 0x01	; 1
    115c:	16 c0       	rjmp	.+44     	; 0x118a <vfprintf+0xb0>
    115e:	83 2d       	mov	r24, r3
    1160:	82 60       	ori	r24, 0x02	; 2
    1162:	38 2e       	mov	r3, r24
    1164:	e3 2d       	mov	r30, r3
    1166:	e4 60       	ori	r30, 0x04	; 4
    1168:	3e 2e       	mov	r3, r30
    116a:	2a c0       	rjmp	.+84     	; 0x11c0 <vfprintf+0xe6>
    116c:	f3 2d       	mov	r31, r3
    116e:	f8 60       	ori	r31, 0x08	; 8
    1170:	1d c0       	rjmp	.+58     	; 0x11ac <vfprintf+0xd2>
    1172:	37 fc       	sbrc	r3, 7
    1174:	2d c0       	rjmp	.+90     	; 0x11d0 <vfprintf+0xf6>
    1176:	20 ed       	ldi	r18, 0xD0	; 208
    1178:	28 0f       	add	r18, r24
    117a:	2a 30       	cpi	r18, 0x0A	; 10
    117c:	40 f0       	brcs	.+16     	; 0x118e <vfprintf+0xb4>
    117e:	8e 32       	cpi	r24, 0x2E	; 46
    1180:	b9 f4       	brne	.+46     	; 0x11b0 <vfprintf+0xd6>
    1182:	36 fc       	sbrc	r3, 6
    1184:	81 c1       	rjmp	.+770    	; 0x1488 <vfprintf+0x3ae>
    1186:	23 2d       	mov	r18, r3
    1188:	20 64       	ori	r18, 0x40	; 64
    118a:	32 2e       	mov	r3, r18
    118c:	19 c0       	rjmp	.+50     	; 0x11c0 <vfprintf+0xe6>
    118e:	36 fe       	sbrs	r3, 6
    1190:	06 c0       	rjmp	.+12     	; 0x119e <vfprintf+0xc4>
    1192:	8a e0       	ldi	r24, 0x0A	; 10
    1194:	98 9e       	mul	r9, r24
    1196:	20 0d       	add	r18, r0
    1198:	11 24       	eor	r1, r1
    119a:	92 2e       	mov	r9, r18
    119c:	11 c0       	rjmp	.+34     	; 0x11c0 <vfprintf+0xe6>
    119e:	ea e0       	ldi	r30, 0x0A	; 10
    11a0:	2e 9e       	mul	r2, r30
    11a2:	20 0d       	add	r18, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	22 2e       	mov	r2, r18
    11a8:	f3 2d       	mov	r31, r3
    11aa:	f0 62       	ori	r31, 0x20	; 32
    11ac:	3f 2e       	mov	r3, r31
    11ae:	08 c0       	rjmp	.+16     	; 0x11c0 <vfprintf+0xe6>
    11b0:	8c 36       	cpi	r24, 0x6C	; 108
    11b2:	21 f4       	brne	.+8      	; 0x11bc <vfprintf+0xe2>
    11b4:	83 2d       	mov	r24, r3
    11b6:	80 68       	ori	r24, 0x80	; 128
    11b8:	38 2e       	mov	r3, r24
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <vfprintf+0xe6>
    11bc:	88 36       	cpi	r24, 0x68	; 104
    11be:	41 f4       	brne	.+16     	; 0x11d0 <vfprintf+0xf6>
    11c0:	f7 01       	movw	r30, r14
    11c2:	93 fd       	sbrc	r25, 3
    11c4:	85 91       	lpm	r24, Z+
    11c6:	93 ff       	sbrs	r25, 3
    11c8:	81 91       	ld	r24, Z+
    11ca:	7f 01       	movw	r14, r30
    11cc:	81 11       	cpse	r24, r1
    11ce:	b3 cf       	rjmp	.-154    	; 0x1136 <vfprintf+0x5c>
    11d0:	98 2f       	mov	r25, r24
    11d2:	9f 7d       	andi	r25, 0xDF	; 223
    11d4:	95 54       	subi	r25, 0x45	; 69
    11d6:	93 30       	cpi	r25, 0x03	; 3
    11d8:	28 f4       	brcc	.+10     	; 0x11e4 <vfprintf+0x10a>
    11da:	0c 5f       	subi	r16, 0xFC	; 252
    11dc:	1f 4f       	sbci	r17, 0xFF	; 255
    11de:	9f e3       	ldi	r25, 0x3F	; 63
    11e0:	99 83       	std	Y+1, r25	; 0x01
    11e2:	0d c0       	rjmp	.+26     	; 0x11fe <vfprintf+0x124>
    11e4:	83 36       	cpi	r24, 0x63	; 99
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <vfprintf+0x11a>
    11e8:	83 37       	cpi	r24, 0x73	; 115
    11ea:	71 f0       	breq	.+28     	; 0x1208 <vfprintf+0x12e>
    11ec:	83 35       	cpi	r24, 0x53	; 83
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <vfprintf+0x118>
    11f0:	59 c0       	rjmp	.+178    	; 0x12a4 <vfprintf+0x1ca>
    11f2:	21 c0       	rjmp	.+66     	; 0x1236 <vfprintf+0x15c>
    11f4:	f8 01       	movw	r30, r16
    11f6:	80 81       	ld	r24, Z
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	0e 5f       	subi	r16, 0xFE	; 254
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	88 24       	eor	r8, r8
    1200:	83 94       	inc	r8
    1202:	91 2c       	mov	r9, r1
    1204:	53 01       	movw	r10, r6
    1206:	13 c0       	rjmp	.+38     	; 0x122e <vfprintf+0x154>
    1208:	28 01       	movw	r4, r16
    120a:	f2 e0       	ldi	r31, 0x02	; 2
    120c:	4f 0e       	add	r4, r31
    120e:	51 1c       	adc	r5, r1
    1210:	f8 01       	movw	r30, r16
    1212:	a0 80       	ld	r10, Z
    1214:	b1 80       	ldd	r11, Z+1	; 0x01
    1216:	36 fe       	sbrs	r3, 6
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <vfprintf+0x146>
    121a:	69 2d       	mov	r22, r9
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <vfprintf+0x14a>
    1220:	6f ef       	ldi	r22, 0xFF	; 255
    1222:	7f ef       	ldi	r23, 0xFF	; 255
    1224:	c5 01       	movw	r24, r10
    1226:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <strnlen>
    122a:	4c 01       	movw	r8, r24
    122c:	82 01       	movw	r16, r4
    122e:	f3 2d       	mov	r31, r3
    1230:	ff 77       	andi	r31, 0x7F	; 127
    1232:	3f 2e       	mov	r3, r31
    1234:	16 c0       	rjmp	.+44     	; 0x1262 <vfprintf+0x188>
    1236:	28 01       	movw	r4, r16
    1238:	22 e0       	ldi	r18, 0x02	; 2
    123a:	42 0e       	add	r4, r18
    123c:	51 1c       	adc	r5, r1
    123e:	f8 01       	movw	r30, r16
    1240:	a0 80       	ld	r10, Z
    1242:	b1 80       	ldd	r11, Z+1	; 0x01
    1244:	36 fe       	sbrs	r3, 6
    1246:	03 c0       	rjmp	.+6      	; 0x124e <vfprintf+0x174>
    1248:	69 2d       	mov	r22, r9
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <vfprintf+0x178>
    124e:	6f ef       	ldi	r22, 0xFF	; 255
    1250:	7f ef       	ldi	r23, 0xFF	; 255
    1252:	c5 01       	movw	r24, r10
    1254:	0e 94 4e 0a 	call	0x149c	; 0x149c <strnlen_P>
    1258:	4c 01       	movw	r8, r24
    125a:	f3 2d       	mov	r31, r3
    125c:	f0 68       	ori	r31, 0x80	; 128
    125e:	3f 2e       	mov	r3, r31
    1260:	82 01       	movw	r16, r4
    1262:	33 fc       	sbrc	r3, 3
    1264:	1b c0       	rjmp	.+54     	; 0x129c <vfprintf+0x1c2>
    1266:	82 2d       	mov	r24, r2
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	88 16       	cp	r8, r24
    126c:	99 06       	cpc	r9, r25
    126e:	b0 f4       	brcc	.+44     	; 0x129c <vfprintf+0x1c2>
    1270:	b6 01       	movw	r22, r12
    1272:	80 e2       	ldi	r24, 0x20	; 32
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <fputc>
    127a:	2a 94       	dec	r2
    127c:	f4 cf       	rjmp	.-24     	; 0x1266 <vfprintf+0x18c>
    127e:	f5 01       	movw	r30, r10
    1280:	37 fc       	sbrc	r3, 7
    1282:	85 91       	lpm	r24, Z+
    1284:	37 fe       	sbrs	r3, 7
    1286:	81 91       	ld	r24, Z+
    1288:	5f 01       	movw	r10, r30
    128a:	b6 01       	movw	r22, r12
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <fputc>
    1292:	21 10       	cpse	r2, r1
    1294:	2a 94       	dec	r2
    1296:	21 e0       	ldi	r18, 0x01	; 1
    1298:	82 1a       	sub	r8, r18
    129a:	91 08       	sbc	r9, r1
    129c:	81 14       	cp	r8, r1
    129e:	91 04       	cpc	r9, r1
    12a0:	71 f7       	brne	.-36     	; 0x127e <vfprintf+0x1a4>
    12a2:	e8 c0       	rjmp	.+464    	; 0x1474 <vfprintf+0x39a>
    12a4:	84 36       	cpi	r24, 0x64	; 100
    12a6:	11 f0       	breq	.+4      	; 0x12ac <vfprintf+0x1d2>
    12a8:	89 36       	cpi	r24, 0x69	; 105
    12aa:	41 f5       	brne	.+80     	; 0x12fc <vfprintf+0x222>
    12ac:	f8 01       	movw	r30, r16
    12ae:	37 fe       	sbrs	r3, 7
    12b0:	07 c0       	rjmp	.+14     	; 0x12c0 <vfprintf+0x1e6>
    12b2:	60 81       	ld	r22, Z
    12b4:	71 81       	ldd	r23, Z+1	; 0x01
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	0c 5f       	subi	r16, 0xFC	; 252
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	08 c0       	rjmp	.+16     	; 0x12d0 <vfprintf+0x1f6>
    12c0:	60 81       	ld	r22, Z
    12c2:	71 81       	ldd	r23, Z+1	; 0x01
    12c4:	07 2e       	mov	r0, r23
    12c6:	00 0c       	add	r0, r0
    12c8:	88 0b       	sbc	r24, r24
    12ca:	99 0b       	sbc	r25, r25
    12cc:	0e 5f       	subi	r16, 0xFE	; 254
    12ce:	1f 4f       	sbci	r17, 0xFF	; 255
    12d0:	f3 2d       	mov	r31, r3
    12d2:	ff 76       	andi	r31, 0x6F	; 111
    12d4:	3f 2e       	mov	r3, r31
    12d6:	97 ff       	sbrs	r25, 7
    12d8:	09 c0       	rjmp	.+18     	; 0x12ec <vfprintf+0x212>
    12da:	90 95       	com	r25
    12dc:	80 95       	com	r24
    12de:	70 95       	com	r23
    12e0:	61 95       	neg	r22
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	8f 4f       	sbci	r24, 0xFF	; 255
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	f0 68       	ori	r31, 0x80	; 128
    12ea:	3f 2e       	mov	r3, r31
    12ec:	2a e0       	ldi	r18, 0x0A	; 10
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	a3 01       	movw	r20, r6
    12f2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__ultoa_invert>
    12f6:	88 2e       	mov	r8, r24
    12f8:	86 18       	sub	r8, r6
    12fa:	45 c0       	rjmp	.+138    	; 0x1386 <vfprintf+0x2ac>
    12fc:	85 37       	cpi	r24, 0x75	; 117
    12fe:	31 f4       	brne	.+12     	; 0x130c <vfprintf+0x232>
    1300:	23 2d       	mov	r18, r3
    1302:	2f 7e       	andi	r18, 0xEF	; 239
    1304:	b2 2e       	mov	r11, r18
    1306:	2a e0       	ldi	r18, 0x0A	; 10
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	25 c0       	rjmp	.+74     	; 0x1356 <vfprintf+0x27c>
    130c:	93 2d       	mov	r25, r3
    130e:	99 7f       	andi	r25, 0xF9	; 249
    1310:	b9 2e       	mov	r11, r25
    1312:	8f 36       	cpi	r24, 0x6F	; 111
    1314:	c1 f0       	breq	.+48     	; 0x1346 <vfprintf+0x26c>
    1316:	18 f4       	brcc	.+6      	; 0x131e <vfprintf+0x244>
    1318:	88 35       	cpi	r24, 0x58	; 88
    131a:	79 f0       	breq	.+30     	; 0x133a <vfprintf+0x260>
    131c:	b5 c0       	rjmp	.+362    	; 0x1488 <vfprintf+0x3ae>
    131e:	80 37       	cpi	r24, 0x70	; 112
    1320:	19 f0       	breq	.+6      	; 0x1328 <vfprintf+0x24e>
    1322:	88 37       	cpi	r24, 0x78	; 120
    1324:	21 f0       	breq	.+8      	; 0x132e <vfprintf+0x254>
    1326:	b0 c0       	rjmp	.+352    	; 0x1488 <vfprintf+0x3ae>
    1328:	e9 2f       	mov	r30, r25
    132a:	e0 61       	ori	r30, 0x10	; 16
    132c:	be 2e       	mov	r11, r30
    132e:	b4 fe       	sbrs	r11, 4
    1330:	0d c0       	rjmp	.+26     	; 0x134c <vfprintf+0x272>
    1332:	fb 2d       	mov	r31, r11
    1334:	f4 60       	ori	r31, 0x04	; 4
    1336:	bf 2e       	mov	r11, r31
    1338:	09 c0       	rjmp	.+18     	; 0x134c <vfprintf+0x272>
    133a:	34 fe       	sbrs	r3, 4
    133c:	0a c0       	rjmp	.+20     	; 0x1352 <vfprintf+0x278>
    133e:	29 2f       	mov	r18, r25
    1340:	26 60       	ori	r18, 0x06	; 6
    1342:	b2 2e       	mov	r11, r18
    1344:	06 c0       	rjmp	.+12     	; 0x1352 <vfprintf+0x278>
    1346:	28 e0       	ldi	r18, 0x08	; 8
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	05 c0       	rjmp	.+10     	; 0x1356 <vfprintf+0x27c>
    134c:	20 e1       	ldi	r18, 0x10	; 16
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <vfprintf+0x27c>
    1352:	20 e1       	ldi	r18, 0x10	; 16
    1354:	32 e0       	ldi	r19, 0x02	; 2
    1356:	f8 01       	movw	r30, r16
    1358:	b7 fe       	sbrs	r11, 7
    135a:	07 c0       	rjmp	.+14     	; 0x136a <vfprintf+0x290>
    135c:	60 81       	ld	r22, Z
    135e:	71 81       	ldd	r23, Z+1	; 0x01
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	93 81       	ldd	r25, Z+3	; 0x03
    1364:	0c 5f       	subi	r16, 0xFC	; 252
    1366:	1f 4f       	sbci	r17, 0xFF	; 255
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <vfprintf+0x29c>
    136a:	60 81       	ld	r22, Z
    136c:	71 81       	ldd	r23, Z+1	; 0x01
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 5f       	subi	r16, 0xFE	; 254
    1374:	1f 4f       	sbci	r17, 0xFF	; 255
    1376:	a3 01       	movw	r20, r6
    1378:	0e 94 a0 0a 	call	0x1540	; 0x1540 <__ultoa_invert>
    137c:	88 2e       	mov	r8, r24
    137e:	86 18       	sub	r8, r6
    1380:	fb 2d       	mov	r31, r11
    1382:	ff 77       	andi	r31, 0x7F	; 127
    1384:	3f 2e       	mov	r3, r31
    1386:	36 fe       	sbrs	r3, 6
    1388:	0d c0       	rjmp	.+26     	; 0x13a4 <vfprintf+0x2ca>
    138a:	23 2d       	mov	r18, r3
    138c:	2e 7f       	andi	r18, 0xFE	; 254
    138e:	a2 2e       	mov	r10, r18
    1390:	89 14       	cp	r8, r9
    1392:	58 f4       	brcc	.+22     	; 0x13aa <vfprintf+0x2d0>
    1394:	34 fe       	sbrs	r3, 4
    1396:	0b c0       	rjmp	.+22     	; 0x13ae <vfprintf+0x2d4>
    1398:	32 fc       	sbrc	r3, 2
    139a:	09 c0       	rjmp	.+18     	; 0x13ae <vfprintf+0x2d4>
    139c:	83 2d       	mov	r24, r3
    139e:	8e 7e       	andi	r24, 0xEE	; 238
    13a0:	a8 2e       	mov	r10, r24
    13a2:	05 c0       	rjmp	.+10     	; 0x13ae <vfprintf+0x2d4>
    13a4:	b8 2c       	mov	r11, r8
    13a6:	a3 2c       	mov	r10, r3
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <vfprintf+0x2d6>
    13aa:	b8 2c       	mov	r11, r8
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <vfprintf+0x2d6>
    13ae:	b9 2c       	mov	r11, r9
    13b0:	a4 fe       	sbrs	r10, 4
    13b2:	0f c0       	rjmp	.+30     	; 0x13d2 <vfprintf+0x2f8>
    13b4:	fe 01       	movw	r30, r28
    13b6:	e8 0d       	add	r30, r8
    13b8:	f1 1d       	adc	r31, r1
    13ba:	80 81       	ld	r24, Z
    13bc:	80 33       	cpi	r24, 0x30	; 48
    13be:	21 f4       	brne	.+8      	; 0x13c8 <vfprintf+0x2ee>
    13c0:	9a 2d       	mov	r25, r10
    13c2:	99 7e       	andi	r25, 0xE9	; 233
    13c4:	a9 2e       	mov	r10, r25
    13c6:	09 c0       	rjmp	.+18     	; 0x13da <vfprintf+0x300>
    13c8:	a2 fe       	sbrs	r10, 2
    13ca:	06 c0       	rjmp	.+12     	; 0x13d8 <vfprintf+0x2fe>
    13cc:	b3 94       	inc	r11
    13ce:	b3 94       	inc	r11
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <vfprintf+0x300>
    13d2:	8a 2d       	mov	r24, r10
    13d4:	86 78       	andi	r24, 0x86	; 134
    13d6:	09 f0       	breq	.+2      	; 0x13da <vfprintf+0x300>
    13d8:	b3 94       	inc	r11
    13da:	a3 fc       	sbrc	r10, 3
    13dc:	11 c0       	rjmp	.+34     	; 0x1400 <vfprintf+0x326>
    13de:	a0 fe       	sbrs	r10, 0
    13e0:	06 c0       	rjmp	.+12     	; 0x13ee <vfprintf+0x314>
    13e2:	b2 14       	cp	r11, r2
    13e4:	88 f4       	brcc	.+34     	; 0x1408 <vfprintf+0x32e>
    13e6:	28 0c       	add	r2, r8
    13e8:	92 2c       	mov	r9, r2
    13ea:	9b 18       	sub	r9, r11
    13ec:	0e c0       	rjmp	.+28     	; 0x140a <vfprintf+0x330>
    13ee:	b2 14       	cp	r11, r2
    13f0:	60 f4       	brcc	.+24     	; 0x140a <vfprintf+0x330>
    13f2:	b6 01       	movw	r22, r12
    13f4:	80 e2       	ldi	r24, 0x20	; 32
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <fputc>
    13fc:	b3 94       	inc	r11
    13fe:	f7 cf       	rjmp	.-18     	; 0x13ee <vfprintf+0x314>
    1400:	b2 14       	cp	r11, r2
    1402:	18 f4       	brcc	.+6      	; 0x140a <vfprintf+0x330>
    1404:	2b 18       	sub	r2, r11
    1406:	02 c0       	rjmp	.+4      	; 0x140c <vfprintf+0x332>
    1408:	98 2c       	mov	r9, r8
    140a:	21 2c       	mov	r2, r1
    140c:	a4 fe       	sbrs	r10, 4
    140e:	10 c0       	rjmp	.+32     	; 0x1430 <vfprintf+0x356>
    1410:	b6 01       	movw	r22, r12
    1412:	80 e3       	ldi	r24, 0x30	; 48
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <fputc>
    141a:	a2 fe       	sbrs	r10, 2
    141c:	17 c0       	rjmp	.+46     	; 0x144c <vfprintf+0x372>
    141e:	a1 fc       	sbrc	r10, 1
    1420:	03 c0       	rjmp	.+6      	; 0x1428 <vfprintf+0x34e>
    1422:	88 e7       	ldi	r24, 0x78	; 120
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 c0       	rjmp	.+4      	; 0x142c <vfprintf+0x352>
    1428:	88 e5       	ldi	r24, 0x58	; 88
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	b6 01       	movw	r22, r12
    142e:	0c c0       	rjmp	.+24     	; 0x1448 <vfprintf+0x36e>
    1430:	8a 2d       	mov	r24, r10
    1432:	86 78       	andi	r24, 0x86	; 134
    1434:	59 f0       	breq	.+22     	; 0x144c <vfprintf+0x372>
    1436:	a1 fe       	sbrs	r10, 1
    1438:	02 c0       	rjmp	.+4      	; 0x143e <vfprintf+0x364>
    143a:	8b e2       	ldi	r24, 0x2B	; 43
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <vfprintf+0x366>
    143e:	80 e2       	ldi	r24, 0x20	; 32
    1440:	a7 fc       	sbrc	r10, 7
    1442:	8d e2       	ldi	r24, 0x2D	; 45
    1444:	b6 01       	movw	r22, r12
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <fputc>
    144c:	89 14       	cp	r8, r9
    144e:	38 f4       	brcc	.+14     	; 0x145e <vfprintf+0x384>
    1450:	b6 01       	movw	r22, r12
    1452:	80 e3       	ldi	r24, 0x30	; 48
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <fputc>
    145a:	9a 94       	dec	r9
    145c:	f7 cf       	rjmp	.-18     	; 0x144c <vfprintf+0x372>
    145e:	8a 94       	dec	r8
    1460:	f3 01       	movw	r30, r6
    1462:	e8 0d       	add	r30, r8
    1464:	f1 1d       	adc	r31, r1
    1466:	80 81       	ld	r24, Z
    1468:	b6 01       	movw	r22, r12
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <fputc>
    1470:	81 10       	cpse	r8, r1
    1472:	f5 cf       	rjmp	.-22     	; 0x145e <vfprintf+0x384>
    1474:	22 20       	and	r2, r2
    1476:	09 f4       	brne	.+2      	; 0x147a <vfprintf+0x3a0>
    1478:	42 ce       	rjmp	.-892    	; 0x10fe <vfprintf+0x24>
    147a:	b6 01       	movw	r22, r12
    147c:	80 e2       	ldi	r24, 0x20	; 32
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <fputc>
    1484:	2a 94       	dec	r2
    1486:	f6 cf       	rjmp	.-20     	; 0x1474 <vfprintf+0x39a>
    1488:	f6 01       	movw	r30, r12
    148a:	86 81       	ldd	r24, Z+6	; 0x06
    148c:	97 81       	ldd	r25, Z+7	; 0x07
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <vfprintf+0x3ba>
    1490:	8f ef       	ldi	r24, 0xFF	; 255
    1492:	9f ef       	ldi	r25, 0xFF	; 255
    1494:	2b 96       	adiw	r28, 0x0b	; 11
    1496:	e2 e1       	ldi	r30, 0x12	; 18
    1498:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__epilogue_restores__>

0000149c <strnlen_P>:
    149c:	fc 01       	movw	r30, r24
    149e:	05 90       	lpm	r0, Z+
    14a0:	61 50       	subi	r22, 0x01	; 1
    14a2:	70 40       	sbci	r23, 0x00	; 0
    14a4:	01 10       	cpse	r0, r1
    14a6:	d8 f7       	brcc	.-10     	; 0x149e <strnlen_P+0x2>
    14a8:	80 95       	com	r24
    14aa:	90 95       	com	r25
    14ac:	8e 0f       	add	r24, r30
    14ae:	9f 1f       	adc	r25, r31
    14b0:	08 95       	ret

000014b2 <strnlen>:
    14b2:	fc 01       	movw	r30, r24
    14b4:	61 50       	subi	r22, 0x01	; 1
    14b6:	70 40       	sbci	r23, 0x00	; 0
    14b8:	01 90       	ld	r0, Z+
    14ba:	01 10       	cpse	r0, r1
    14bc:	d8 f7       	brcc	.-10     	; 0x14b4 <strnlen+0x2>
    14be:	80 95       	com	r24
    14c0:	90 95       	com	r25
    14c2:	8e 0f       	add	r24, r30
    14c4:	9f 1f       	adc	r25, r31
    14c6:	08 95       	ret

000014c8 <fputc>:
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	fb 01       	movw	r30, r22
    14d2:	23 81       	ldd	r18, Z+3	; 0x03
    14d4:	21 fd       	sbrc	r18, 1
    14d6:	03 c0       	rjmp	.+6      	; 0x14de <fputc+0x16>
    14d8:	8f ef       	ldi	r24, 0xFF	; 255
    14da:	9f ef       	ldi	r25, 0xFF	; 255
    14dc:	2c c0       	rjmp	.+88     	; 0x1536 <fputc+0x6e>
    14de:	22 ff       	sbrs	r18, 2
    14e0:	16 c0       	rjmp	.+44     	; 0x150e <fputc+0x46>
    14e2:	46 81       	ldd	r20, Z+6	; 0x06
    14e4:	57 81       	ldd	r21, Z+7	; 0x07
    14e6:	24 81       	ldd	r18, Z+4	; 0x04
    14e8:	35 81       	ldd	r19, Z+5	; 0x05
    14ea:	42 17       	cp	r20, r18
    14ec:	53 07       	cpc	r21, r19
    14ee:	44 f4       	brge	.+16     	; 0x1500 <fputc+0x38>
    14f0:	a0 81       	ld	r26, Z
    14f2:	b1 81       	ldd	r27, Z+1	; 0x01
    14f4:	9d 01       	movw	r18, r26
    14f6:	2f 5f       	subi	r18, 0xFF	; 255
    14f8:	3f 4f       	sbci	r19, 0xFF	; 255
    14fa:	20 83       	st	Z, r18
    14fc:	31 83       	std	Z+1, r19	; 0x01
    14fe:	8c 93       	st	X, r24
    1500:	26 81       	ldd	r18, Z+6	; 0x06
    1502:	37 81       	ldd	r19, Z+7	; 0x07
    1504:	2f 5f       	subi	r18, 0xFF	; 255
    1506:	3f 4f       	sbci	r19, 0xFF	; 255
    1508:	26 83       	std	Z+6, r18	; 0x06
    150a:	37 83       	std	Z+7, r19	; 0x07
    150c:	14 c0       	rjmp	.+40     	; 0x1536 <fputc+0x6e>
    150e:	8b 01       	movw	r16, r22
    1510:	ec 01       	movw	r28, r24
    1512:	fb 01       	movw	r30, r22
    1514:	00 84       	ldd	r0, Z+8	; 0x08
    1516:	f1 85       	ldd	r31, Z+9	; 0x09
    1518:	e0 2d       	mov	r30, r0
    151a:	09 95       	icall
    151c:	89 2b       	or	r24, r25
    151e:	e1 f6       	brne	.-72     	; 0x14d8 <fputc+0x10>
    1520:	d8 01       	movw	r26, r16
    1522:	16 96       	adiw	r26, 0x06	; 6
    1524:	8d 91       	ld	r24, X+
    1526:	9c 91       	ld	r25, X
    1528:	17 97       	sbiw	r26, 0x07	; 7
    152a:	01 96       	adiw	r24, 0x01	; 1
    152c:	16 96       	adiw	r26, 0x06	; 6
    152e:	8d 93       	st	X+, r24
    1530:	9c 93       	st	X, r25
    1532:	17 97       	sbiw	r26, 0x07	; 7
    1534:	ce 01       	movw	r24, r28
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	1f 91       	pop	r17
    153c:	0f 91       	pop	r16
    153e:	08 95       	ret

00001540 <__ultoa_invert>:
    1540:	fa 01       	movw	r30, r20
    1542:	aa 27       	eor	r26, r26
    1544:	28 30       	cpi	r18, 0x08	; 8
    1546:	51 f1       	breq	.+84     	; 0x159c <__ultoa_invert+0x5c>
    1548:	20 31       	cpi	r18, 0x10	; 16
    154a:	81 f1       	breq	.+96     	; 0x15ac <__ultoa_invert+0x6c>
    154c:	e8 94       	clt
    154e:	6f 93       	push	r22
    1550:	6e 7f       	andi	r22, 0xFE	; 254
    1552:	6e 5f       	subi	r22, 0xFE	; 254
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	8f 4f       	sbci	r24, 0xFF	; 255
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	af 4f       	sbci	r26, 0xFF	; 255
    155c:	b1 e0       	ldi	r27, 0x01	; 1
    155e:	3e d0       	rcall	.+124    	; 0x15dc <__ultoa_invert+0x9c>
    1560:	b4 e0       	ldi	r27, 0x04	; 4
    1562:	3c d0       	rcall	.+120    	; 0x15dc <__ultoa_invert+0x9c>
    1564:	67 0f       	add	r22, r23
    1566:	78 1f       	adc	r23, r24
    1568:	89 1f       	adc	r24, r25
    156a:	9a 1f       	adc	r25, r26
    156c:	a1 1d       	adc	r26, r1
    156e:	68 0f       	add	r22, r24
    1570:	79 1f       	adc	r23, r25
    1572:	8a 1f       	adc	r24, r26
    1574:	91 1d       	adc	r25, r1
    1576:	a1 1d       	adc	r26, r1
    1578:	6a 0f       	add	r22, r26
    157a:	71 1d       	adc	r23, r1
    157c:	81 1d       	adc	r24, r1
    157e:	91 1d       	adc	r25, r1
    1580:	a1 1d       	adc	r26, r1
    1582:	20 d0       	rcall	.+64     	; 0x15c4 <__ultoa_invert+0x84>
    1584:	09 f4       	brne	.+2      	; 0x1588 <__ultoa_invert+0x48>
    1586:	68 94       	set
    1588:	3f 91       	pop	r19
    158a:	2a e0       	ldi	r18, 0x0A	; 10
    158c:	26 9f       	mul	r18, r22
    158e:	11 24       	eor	r1, r1
    1590:	30 19       	sub	r19, r0
    1592:	30 5d       	subi	r19, 0xD0	; 208
    1594:	31 93       	st	Z+, r19
    1596:	de f6       	brtc	.-74     	; 0x154e <__ultoa_invert+0xe>
    1598:	cf 01       	movw	r24, r30
    159a:	08 95       	ret
    159c:	46 2f       	mov	r20, r22
    159e:	47 70       	andi	r20, 0x07	; 7
    15a0:	40 5d       	subi	r20, 0xD0	; 208
    15a2:	41 93       	st	Z+, r20
    15a4:	b3 e0       	ldi	r27, 0x03	; 3
    15a6:	0f d0       	rcall	.+30     	; 0x15c6 <__ultoa_invert+0x86>
    15a8:	c9 f7       	brne	.-14     	; 0x159c <__ultoa_invert+0x5c>
    15aa:	f6 cf       	rjmp	.-20     	; 0x1598 <__ultoa_invert+0x58>
    15ac:	46 2f       	mov	r20, r22
    15ae:	4f 70       	andi	r20, 0x0F	; 15
    15b0:	40 5d       	subi	r20, 0xD0	; 208
    15b2:	4a 33       	cpi	r20, 0x3A	; 58
    15b4:	18 f0       	brcs	.+6      	; 0x15bc <__ultoa_invert+0x7c>
    15b6:	49 5d       	subi	r20, 0xD9	; 217
    15b8:	31 fd       	sbrc	r19, 1
    15ba:	40 52       	subi	r20, 0x20	; 32
    15bc:	41 93       	st	Z+, r20
    15be:	02 d0       	rcall	.+4      	; 0x15c4 <__ultoa_invert+0x84>
    15c0:	a9 f7       	brne	.-22     	; 0x15ac <__ultoa_invert+0x6c>
    15c2:	ea cf       	rjmp	.-44     	; 0x1598 <__ultoa_invert+0x58>
    15c4:	b4 e0       	ldi	r27, 0x04	; 4
    15c6:	a6 95       	lsr	r26
    15c8:	97 95       	ror	r25
    15ca:	87 95       	ror	r24
    15cc:	77 95       	ror	r23
    15ce:	67 95       	ror	r22
    15d0:	ba 95       	dec	r27
    15d2:	c9 f7       	brne	.-14     	; 0x15c6 <__ultoa_invert+0x86>
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	61 05       	cpc	r22, r1
    15d8:	71 05       	cpc	r23, r1
    15da:	08 95       	ret
    15dc:	9b 01       	movw	r18, r22
    15de:	ac 01       	movw	r20, r24
    15e0:	0a 2e       	mov	r0, r26
    15e2:	06 94       	lsr	r0
    15e4:	57 95       	ror	r21
    15e6:	47 95       	ror	r20
    15e8:	37 95       	ror	r19
    15ea:	27 95       	ror	r18
    15ec:	ba 95       	dec	r27
    15ee:	c9 f7       	brne	.-14     	; 0x15e2 <__ultoa_invert+0xa2>
    15f0:	62 0f       	add	r22, r18
    15f2:	73 1f       	adc	r23, r19
    15f4:	84 1f       	adc	r24, r20
    15f6:	95 1f       	adc	r25, r21
    15f8:	a0 1d       	adc	r26, r0
    15fa:	08 95       	ret

000015fc <__prologue_saves__>:
    15fc:	2f 92       	push	r2
    15fe:	3f 92       	push	r3
    1600:	4f 92       	push	r4
    1602:	5f 92       	push	r5
    1604:	6f 92       	push	r6
    1606:	7f 92       	push	r7
    1608:	8f 92       	push	r8
    160a:	9f 92       	push	r9
    160c:	af 92       	push	r10
    160e:	bf 92       	push	r11
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	ca 1b       	sub	r28, r26
    1626:	db 0b       	sbc	r29, r27
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	09 94       	ijmp

0000162e <__epilogue_restores__>:
    162e:	2a 88       	ldd	r2, Y+18	; 0x12
    1630:	39 88       	ldd	r3, Y+17	; 0x11
    1632:	48 88       	ldd	r4, Y+16	; 0x10
    1634:	5f 84       	ldd	r5, Y+15	; 0x0f
    1636:	6e 84       	ldd	r6, Y+14	; 0x0e
    1638:	7d 84       	ldd	r7, Y+13	; 0x0d
    163a:	8c 84       	ldd	r8, Y+12	; 0x0c
    163c:	9b 84       	ldd	r9, Y+11	; 0x0b
    163e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1640:	b9 84       	ldd	r11, Y+9	; 0x09
    1642:	c8 84       	ldd	r12, Y+8	; 0x08
    1644:	df 80       	ldd	r13, Y+7	; 0x07
    1646:	ee 80       	ldd	r14, Y+6	; 0x06
    1648:	fd 80       	ldd	r15, Y+5	; 0x05
    164a:	0c 81       	ldd	r16, Y+4	; 0x04
    164c:	1b 81       	ldd	r17, Y+3	; 0x03
    164e:	aa 81       	ldd	r26, Y+2	; 0x02
    1650:	b9 81       	ldd	r27, Y+1	; 0x01
    1652:	ce 0f       	add	r28, r30
    1654:	d1 1d       	adc	r29, r1
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	ed 01       	movw	r28, r26
    165c:	08 95       	ret

0000165e <_exit>:
    165e:	f8 94       	cli

00001660 <__stop_program>:
    1660:	ff cf       	rjmp	.-2      	; 0x1660 <__stop_program>
